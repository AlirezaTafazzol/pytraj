/* Generated by Cython 0.22 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_22"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
  #define __Pyx_PyFrozenSet_Size(s)         PyObject_Size(s)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
  #define __Pyx_PyFrozenSet_Size(s)         PySet_Size(s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#define __Pyx_void_to_None(void_result) (void_result, Py_INCREF(Py_None), Py_None)
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(T& ref) : ptr(&ref) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__pytraj__core__ParameterTypes
#define __PYX_HAVE_API__pytraj__core__ParameterTypes
#include <vector>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "string.h"
#include <string>
#include "ParameterTypes.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value)\
        (sizeof(int) >= sizeof(Py_ssize_t) ? abs(value) :\
         (sizeof(long) >= sizeof(Py_ssize_t) ? labs(value) : llabs(value)))
#else
    #define __Pyx_sst_abs(value)\
        (sizeof(int) >= sizeof(Py_ssize_t) ? abs(value) :\
         (sizeof(long) >= sizeof(Py_ssize_t) ? labs(value) :\
          ((value<0) ? -value : value)))
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "pytraj/core/ParameterTypes.pyx",
  "stringsource",
  "pytraj/core/ParameterTypes.pxd",
};

/*--- Type declarations ---*/
struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType;
struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType;
struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType;
struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleParmType;
struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType;
struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_ParmType;
struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType;
struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondType;
struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType;
struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondParmType;
struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType;
struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType;
struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType;
struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType;
struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType;

/* "pytraj/core/ParameterTypes.pxd":5
 * from libcpp.string cimport string
 * 
 * ctypedef vector[_BondParmType] BondParmArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_BondType] BondArray
 * ctypedef vector[_AngleParmType] AngleParmArray
 */
typedef std::vector<BondParmType>  __pyx_t_6pytraj_4core_14ParameterTypes_BondParmArray;

/* "pytraj/core/ParameterTypes.pxd":6
 * 
 * ctypedef vector[_BondParmType] BondParmArray
 * ctypedef vector[_BondType] BondArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_AngleParmType] AngleParmArray
 * ctypedef vector[_AngleType] AngleArray
 */
typedef std::vector<BondType>  __pyx_t_6pytraj_4core_14ParameterTypes_BondArray;

/* "pytraj/core/ParameterTypes.pxd":7
 * ctypedef vector[_BondParmType] BondParmArray
 * ctypedef vector[_BondType] BondArray
 * ctypedef vector[_AngleParmType] AngleParmArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_AngleType] AngleArray
 * ctypedef vector[_DihedralParmType] DihedralParmArray
 */
typedef std::vector<AngleParmType>  __pyx_t_6pytraj_4core_14ParameterTypes_AngleParmArray;

/* "pytraj/core/ParameterTypes.pxd":8
 * ctypedef vector[_BondType] BondArray
 * ctypedef vector[_AngleParmType] AngleParmArray
 * ctypedef vector[_AngleType] AngleArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_DihedralParmType] DihedralParmArray
 * ctypedef vector[_DihedralType] DihedralArray
 */
typedef std::vector<AngleType>  __pyx_t_6pytraj_4core_14ParameterTypes_AngleArray;

/* "pytraj/core/ParameterTypes.pxd":9
 * ctypedef vector[_AngleParmType] AngleParmArray
 * ctypedef vector[_AngleType] AngleArray
 * ctypedef vector[_DihedralParmType] DihedralParmArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_DihedralType] DihedralArray
 * ctypedef vector[_HB_ParmType] HB_ParmArray
 */
typedef std::vector<DihedralParmType>  __pyx_t_6pytraj_4core_14ParameterTypes_DihedralParmArray;

/* "pytraj/core/ParameterTypes.pxd":10
 * ctypedef vector[_AngleType] AngleArray
 * ctypedef vector[_DihedralParmType] DihedralParmArray
 * ctypedef vector[_DihedralType] DihedralArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_HB_ParmType] HB_ParmArray
 * ctypedef vector[_NonbondType] NonbondArray
 */
typedef std::vector<DihedralType>  __pyx_t_6pytraj_4core_14ParameterTypes_DihedralArray;

/* "pytraj/core/ParameterTypes.pxd":11
 * ctypedef vector[_DihedralParmType] DihedralParmArray
 * ctypedef vector[_DihedralType] DihedralArray
 * ctypedef vector[_HB_ParmType] HB_ParmArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_NonbondType] NonbondArray
 * ctypedef vector[_LES_AtomType] LES_Array
 */
typedef std::vector<HB_ParmType>  __pyx_t_6pytraj_4core_14ParameterTypes_HB_ParmArray;

/* "pytraj/core/ParameterTypes.pxd":12
 * ctypedef vector[_DihedralType] DihedralArray
 * ctypedef vector[_HB_ParmType] HB_ParmArray
 * ctypedef vector[_NonbondType] NonbondArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_LES_AtomType] LES_Array
 * ctypedef vector[_CmapGridType] CmapGridArray
 */
typedef std::vector<NonbondType>  __pyx_t_6pytraj_4core_14ParameterTypes_NonbondArray;

/* "pytraj/core/ParameterTypes.pxd":13
 * ctypedef vector[_HB_ParmType] HB_ParmArray
 * ctypedef vector[_NonbondType] NonbondArray
 * ctypedef vector[_LES_AtomType] LES_Array             # <<<<<<<<<<<<<<
 * ctypedef vector[_CmapGridType] CmapGridArray
 * ctypedef vector[_CmapType] CmapArray
 */
typedef std::vector<LES_AtomType>  __pyx_t_6pytraj_4core_14ParameterTypes_LES_Array;

/* "pytraj/core/ParameterTypes.pxd":14
 * ctypedef vector[_NonbondType] NonbondArray
 * ctypedef vector[_LES_AtomType] LES_Array
 * ctypedef vector[_CmapGridType] CmapGridArray             # <<<<<<<<<<<<<<
 * ctypedef vector[_CmapType] CmapArray
 * 
 */
typedef std::vector<CmapGridType>  __pyx_t_6pytraj_4core_14ParameterTypes_CmapGridArray;

/* "pytraj/core/ParameterTypes.pxd":15
 * ctypedef vector[_LES_AtomType] LES_Array
 * ctypedef vector[_CmapGridType] CmapGridArray
 * ctypedef vector[_CmapType] CmapArray             # <<<<<<<<<<<<<<
 * 
 * # should I need to define fused type?
 */
typedef std::vector<CmapType>  __pyx_t_6pytraj_4core_14ParameterTypes_CmapArray;

/* "pytraj/core/ParameterTypes.pxd":186
 * 
 * 
 * cdef class AngleType:             # <<<<<<<<<<<<<<
 *     cdef _AngleType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType {
  PyObject_HEAD
  AngleType *thisptr;
};


/* "pytraj/core/ParameterTypes.pxd":189
 *     cdef _AngleType* thisptr
 * 
 * cdef class NonbondParmType:             # <<<<<<<<<<<<<<
 *     cdef _NonbondParmType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType {
  PyObject_HEAD
  NonbondParmType *thisptr;
};


/* "pytraj/core/ParameterTypes.pxd":192
 *     cdef _NonbondParmType* thisptr
 * 
 * cdef class LES_AtomType:             # <<<<<<<<<<<<<<
 *     cdef _LES_AtomType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType {
  PyObject_HEAD
  LES_AtomType *thisptr;
};


/* "pytraj/core/ParameterTypes.pxd":195
 *     cdef _LES_AtomType* thisptr
 * 
 * cdef class AngleParmType:             # <<<<<<<<<<<<<<
 *     cdef _AngleParmType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleParmType {
  PyObject_HEAD
  AngleParmType *thisptr;
};


/* "pytraj/core/ParameterTypes.pxd":198
 *     cdef _AngleParmType* thisptr
 * 
 * cdef class CmapType:             # <<<<<<<<<<<<<<
 *     cdef _CmapType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType {
  PyObject_HEAD
  CmapType *thisptr;
};


/* "pytraj/core/ParameterTypes.pxd":201
 *     cdef _CmapType* thisptr
 * 
 * cdef class LES_ParmType:             # <<<<<<<<<<<<<<
 *     cdef _LES_ParmType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_ParmType {
  PyObject_HEAD
  LES_ParmType *thisptr;
};


/* "pytraj/core/ParameterTypes.pxd":204
 *     cdef _LES_ParmType* thisptr
 * 
 * cdef class HB_ParmType:             # <<<<<<<<<<<<<<
 *     cdef _HB_ParmType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType {
  PyObject_HEAD
  HB_ParmType *thisptr;
};


/* "pytraj/core/ParameterTypes.pxd":207
 *     cdef _HB_ParmType* thisptr
 * 
 * cdef class NonbondType:             # <<<<<<<<<<<<<<
 *     cdef _NonbondType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondType {
  PyObject_HEAD
  NonbondType *thisptr;
};


/* "pytraj/core/ParameterTypes.pxd":210
 *     cdef _NonbondType* thisptr
 * 
 * cdef class ChamberParmType:             # <<<<<<<<<<<<<<
 *     cdef _ChamberParmType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType {
  PyObject_HEAD
  ChamberParmType *thisptr;
};


/* "pytraj/core/ParameterTypes.pxd":213
 *     cdef _ChamberParmType* thisptr
 * 
 * cdef class BondParmType:             # <<<<<<<<<<<<<<
 *     cdef _BondParmType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondParmType {
  PyObject_HEAD
  BondParmType *thisptr;
};


/* "pytraj/core/ParameterTypes.pxd":216
 *     cdef _BondParmType* thisptr
 * 
 * cdef class CmapGridType:             # <<<<<<<<<<<<<<
 *     cdef _CmapGridType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType {
  PyObject_HEAD
  CmapGridType *thisptr;
};


/* "pytraj/core/ParameterTypes.pxd":219
 *     cdef _CmapGridType* thisptr
 * 
 * cdef class DihedralType:             # <<<<<<<<<<<<<<
 *     cdef _DihedralType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType {
  PyObject_HEAD
  DihedralType *thisptr;
};


/* "pytraj/core/ParameterTypes.pxd":222
 *     cdef _DihedralType* thisptr
 * 
 * cdef class BondType:             # <<<<<<<<<<<<<<
 *     cdef _BondType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType {
  PyObject_HEAD
  BondType *thisptr;
};


/* "pytraj/core/ParameterTypes.pxd":225
 *     cdef _BondType* thisptr
 * 
 * cdef class CapParmType:             # <<<<<<<<<<<<<<
 *     cdef _CapParmType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType {
  PyObject_HEAD
  CapParmType *thisptr;
};


/* "pytraj/core/ParameterTypes.pxd":228
 *     cdef _CapParmType* thisptr
 * 
 * cdef class DihedralParmType:             # <<<<<<<<<<<<<<
 *     cdef _DihedralParmType* thisptr
 * 
 */
struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType {
  PyObject_HEAD
  DihedralParmType *thisptr;
};


/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE int __Pyx_IterFinish(void);

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'pytraj.core.ParameterTypes' */
static PyTypeObject *__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_14ParameterTypes_NonbondParmType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_14ParameterTypes_LES_AtomType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleParmType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_14ParameterTypes_LES_ParmType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_14ParameterTypes_HB_ParmType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_14ParameterTypes_NonbondType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_14ParameterTypes_ChamberParmType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_14ParameterTypes_BondParmType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapGridType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_14ParameterTypes_BondType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_14ParameterTypes_CapParmType = 0;
static PyTypeObject *__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType = 0;
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *); /*proto*/
static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &); /*proto*/
#define __Pyx_MODULE_NAME "pytraj.core.ParameterTypes"
int __pyx_module_is_main_pytraj__core__ParameterTypes = 0;

/* Implementation of 'pytraj.core.ParameterTypes' */
static PyObject *__pyx_builtin_property;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_range;
static int __pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static void __pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType_4A1(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType_6A2(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType_8A3(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType_10Idx(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static void __pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType_4HasNonbond(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType_6Ntypes(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType_8NBindex(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType_10GetLJindex(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *__pyx_v_self, int __pyx_v_type1, int __pyx_v_type2); /* proto */
static int __pyx_pf_6pytraj_4core_14ParameterTypes_12LES_AtomType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType *__pyx_v_self); /* proto */
static void __pyx_pf_6pytraj_4core_14ParameterTypes_12LES_AtomType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12LES_AtomType_4Type(struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12LES_AtomType_6Copy(struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12LES_AtomType_8ID(struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_4core_14ParameterTypes_13AngleParmType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleParmType *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static void __pyx_pf_6pytraj_4core_14ParameterTypes_13AngleParmType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_13AngleParmType_4Tk(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_13AngleParmType_6Teq(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleParmType *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static void __pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_4A1(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_6A2(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_8A3(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_10A4(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_12A5(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_14Idx(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_4core_14ParameterTypes_11HB_ParmType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static void __pyx_pf_6pytraj_4core_14ParameterTypes_11HB_ParmType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11HB_ParmType_4Asol(struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11HB_ParmType_6Bsol(struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11HB_ParmType_8HBcut(struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_4core_14ParameterTypes_11NonbondType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondType *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static void __pyx_pf_6pytraj_4core_14ParameterTypes_11NonbondType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11NonbondType_4A(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11NonbondType_6B(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondType *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self); /* proto */
static void __pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_4HasChamber(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_6HasCmap(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_8FF_Version(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_10FF_Type(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_12SetChamber(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self, int __pyx_v_i, std::string __pyx_v_s); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_14SetImproper(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self, PyObject *__pyx_v_im_py, PyObject *__pyx_v_imp_py); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_16AddCmapGrid(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self, struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType *__pyx_v_g); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_18AddCmapTerm(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self, struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_c); /* proto */
static int __pyx_pf_6pytraj_4core_14ParameterTypes_12BondParmType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondParmType *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static void __pyx_pf_6pytraj_4core_14ParameterTypes_12BondParmType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12BondParmType_4Rk(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12BondParmType_6Req(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondParmType *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_4core_14ParameterTypes_12CmapGridType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static void __pyx_pf_6pytraj_4core_14ParameterTypes_12CmapGridType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12CmapGridType_4resolution(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12CmapGridType_6grid(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static void __pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_4A1(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_6A2(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_8A3(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_10A4(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_12type(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_14idx(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_4core_14ParameterTypes_8BondType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static void __pyx_pf_6pytraj_4core_14ParameterTypes_8BondType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8BondType_4A1(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8BondType_6A2(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8BondType_8Idx(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8BondType_10Idx(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *__pyx_v_self, int __pyx_v_i); /* proto */
static int __pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static void __pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_4has_water_cap(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_6NatCap(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_8CutCap(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_10xCap(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_12yCap(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_14zCap(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *__pyx_v_self); /* proto */
static int __pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self, PyObject *__pyx_v_arg); /* proto */
static void __pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_4Pk(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_6Pn(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_8Phase(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_10SCEE(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_12SCEE(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self, double __pyx_v_s); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_14SCNB(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_16SCNB(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self, double __pyx_v_s); /* proto */
static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_AngleType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_NonbondParmType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_LES_AtomType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_AngleParmType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_CmapType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_LES_ParmType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_HB_ParmType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_NonbondType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_ChamberParmType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_BondParmType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_CmapGridType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_DihedralType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_BondType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_CapParmType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_DihedralParmType(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_A[] = "A";
static char __pyx_k_B[] = "B";
static char __pyx_k_i[] = "i";
static char __pyx_k_s[] = "s";
static char __pyx_k_A1[] = "A1";
static char __pyx_k_A2[] = "A2";
static char __pyx_k_A3[] = "A3";
static char __pyx_k_A4[] = "A4";
static char __pyx_k_A5[] = "A5";
static char __pyx_k_ID[] = "ID";
static char __pyx_k_Pk[] = "Pk";
static char __pyx_k_Pn[] = "Pn";
static char __pyx_k_Rk[] = "Rk";
static char __pyx_k_Tk[] = "Tk";
static char __pyx_k_Idx[] = "Idx";
static char __pyx_k_Req[] = "Req";
static char __pyx_k_Teq[] = "Teq";
static char __pyx_k_arg[] = "arg";
static char __pyx_k_idx[] = "idx";
static char __pyx_k_Asol[] = "Asol";
static char __pyx_k_Bsol[] = "Bsol";
static char __pyx_k_SCEE[] = "SCEE";
static char __pyx_k_SCNB[] = "SCNB";
static char __pyx_k_Type[] = "Type";
static char __pyx_k_grid[] = "grid";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_type[] = "type";
static char __pyx_k_xCap[] = "xCap";
static char __pyx_k_yCap[] = "yCap";
static char __pyx_k_zCap[] = "zCap";
static char __pyx_k_HBcut[] = "HBcut";
static char __pyx_k_Phase[] = "Phase";
static char __pyx_k_im_py[] = "im_py";
static char __pyx_k_range[] = "range";
static char __pyx_k_type1[] = "type1";
static char __pyx_k_type2[] = "type2";
static char __pyx_k_CutCap[] = "CutCap";
static char __pyx_k_NatCap[] = "NatCap";
static char __pyx_k_Ntypes[] = "Ntypes";
static char __pyx_k_imp_py[] = "imp_py";
static char __pyx_k_setter[] = "setter";
static char __pyx_k_FF_Type[] = "FF_Type";
static char __pyx_k_NBindex[] = "NBindex";
static char __pyx_k_property[] = "property";
static char __pyx_k_FF_Version[] = "FF_Version";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_resolution[] = "resolution";
static PyObject *__pyx_n_s_A;
static PyObject *__pyx_n_s_A1;
static PyObject *__pyx_n_s_A2;
static PyObject *__pyx_n_s_A3;
static PyObject *__pyx_n_s_A4;
static PyObject *__pyx_n_s_A5;
static PyObject *__pyx_n_s_Asol;
static PyObject *__pyx_n_s_B;
static PyObject *__pyx_n_s_Bsol;
static PyObject *__pyx_n_s_CutCap;
static PyObject *__pyx_n_s_FF_Type;
static PyObject *__pyx_n_s_FF_Version;
static PyObject *__pyx_n_s_HBcut;
static PyObject *__pyx_n_s_ID;
static PyObject *__pyx_n_s_Idx;
static PyObject *__pyx_n_s_NBindex;
static PyObject *__pyx_n_s_NatCap;
static PyObject *__pyx_n_s_Ntypes;
static PyObject *__pyx_n_s_Phase;
static PyObject *__pyx_n_s_Pk;
static PyObject *__pyx_n_s_Pn;
static PyObject *__pyx_n_s_Req;
static PyObject *__pyx_n_s_Rk;
static PyObject *__pyx_n_s_SCEE;
static PyObject *__pyx_n_s_SCNB;
static PyObject *__pyx_n_s_Teq;
static PyObject *__pyx_n_s_Tk;
static PyObject *__pyx_n_s_Type;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_arg;
static PyObject *__pyx_n_s_grid;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_idx;
static PyObject *__pyx_n_s_im_py;
static PyObject *__pyx_n_s_imp_py;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_property;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_resolution;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_n_s_setter;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_type;
static PyObject *__pyx_n_s_type1;
static PyObject *__pyx_n_s_type2;
static PyObject *__pyx_n_s_xCap;
static PyObject *__pyx_n_s_yCap;
static PyObject *__pyx_n_s_zCap;

/* "pytraj/core/ParameterTypes.pyx":10
 * 
 * cdef class AngleType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         cdef int a1, a2, a3, idx
 *         if not arg:
 */

/* Python wrapper */
static int __pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.AngleType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType___cinit__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *)__pyx_v_self), __pyx_v_arg);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *__pyx_v_self, PyObject *__pyx_v_arg) {
  int __pyx_v_a1;
  int __pyx_v_a2;
  int __pyx_v_a3;
  int __pyx_v_idx;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pytraj/core/ParameterTypes.pyx":12
 *     def __cinit__(self, arg=None):
 *         cdef int a1, a2, a3, idx
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _AngleType()
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_arg); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "pytraj/core/ParameterTypes.pyx":13
 *         cdef int a1, a2, a3, idx
 *         if not arg:
 *             self.thisptr = new _AngleType()             # <<<<<<<<<<<<<<
 *         else:
 *             if len(arg) == 4:
 */
    __pyx_v_self->thisptr = new AngleType();

    /* "pytraj/core/ParameterTypes.pyx":12
 *     def __cinit__(self, arg=None):
 *         cdef int a1, a2, a3, idx
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _AngleType()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pytraj/core/ParameterTypes.pyx":15
 *             self.thisptr = new _AngleType()
 *         else:
 *             if len(arg) == 4:             # <<<<<<<<<<<<<<
 *                 a1, a2, a3, idx = arg
 *                 self.thisptr = new _AngleType(a1, a2, a3, idx)
 */
  /*else*/ {
    __pyx_t_3 = PyObject_Length(__pyx_v_arg); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_3 == 4) != 0);
    if (__pyx_t_2) {

      /* "pytraj/core/ParameterTypes.pyx":16
 *         else:
 *             if len(arg) == 4:
 *                 a1, a2, a3, idx = arg             # <<<<<<<<<<<<<<
 *                 self.thisptr = new _AngleType(a1, a2, a3, idx)
 *             else:
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_arg))) || (PyList_CheckExact(__pyx_v_arg))) {
        PyObject* sequence = __pyx_v_arg;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 4)) {
          if (size > 4) __Pyx_RaiseTooManyValuesError(4);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[4] = {&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
          for (i=0; i < 4; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[4] = {&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
        __pyx_t_8 = PyObject_GetIter(__pyx_v_arg); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
        for (index=0; index < 4; index++) {
          PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L6_unpacking_done;
        __pyx_L5_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L6_unpacking_done:;
      }
      __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_v_a1 = __pyx_t_10;
      __pyx_v_a2 = __pyx_t_11;
      __pyx_v_a3 = __pyx_t_12;
      __pyx_v_idx = __pyx_t_13;

      /* "pytraj/core/ParameterTypes.pyx":17
 *             if len(arg) == 4:
 *                 a1, a2, a3, idx = arg
 *                 self.thisptr = new _AngleType(a1, a2, a3, idx)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError()
 */
      __pyx_v_self->thisptr = new AngleType(__pyx_v_a1, __pyx_v_a2, __pyx_v_a3, __pyx_v_idx);

      /* "pytraj/core/ParameterTypes.pyx":15
 *             self.thisptr = new _AngleType()
 *         else:
 *             if len(arg) == 4:             # <<<<<<<<<<<<<<
 *                 a1, a2, a3, idx = arg
 *                 self.thisptr = new _AngleType(a1, a2, a3, idx)
 */
      goto __pyx_L4;
    }

    /* "pytraj/core/ParameterTypes.pyx":19
 *                 self.thisptr = new _AngleType(a1, a2, a3, idx)
 *             else:
 *                 raise ValueError()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    /*else*/ {
      __pyx_t_7 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ValueError); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_Raise(__pyx_t_7, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L4:;
  }
  __pyx_L3:;

  /* "pytraj/core/ParameterTypes.pyx":10
 * 
 * cdef class AngleType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         cdef int a1, a2, a3, idx
 *         if not arg:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.AngleType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":21
 *                 raise ValueError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType_2__dealloc__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pytraj/core/ParameterTypes.pyx":22
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->thisptr;

  /* "pytraj/core/ParameterTypes.pyx":21
 *                 raise ValueError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pytraj/core/ParameterTypes.pyx":25
 * 
 *     @property
 *     def A1(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A1()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_5A1(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_9AngleType_4A1[] = "AngleType.A1(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_5A1(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("A1 (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType_4A1(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType_4A1(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("A1", 0);

  /* "pytraj/core/ParameterTypes.pyx":26
 *     @property
 *     def A1(self):
 *         return self.thisptr.A1()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->A1()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":25
 * 
 *     @property
 *     def A1(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A1()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.AngleType.A1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":29
 * 
 *     @property
 *     def A2(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A2()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_7A2(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_9AngleType_6A2[] = "AngleType.A2(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_7A2(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("A2 (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType_6A2(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType_6A2(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("A2", 0);

  /* "pytraj/core/ParameterTypes.pyx":30
 *     @property
 *     def A2(self):
 *         return self.thisptr.A2()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->A2()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":29
 * 
 *     @property
 *     def A2(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A2()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.AngleType.A2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":33
 * 
 *     @property
 *     def A3(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A3()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_9A3(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_9AngleType_8A3[] = "AngleType.A3(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_9A3(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("A3 (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType_8A3(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType_8A3(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("A3", 0);

  /* "pytraj/core/ParameterTypes.pyx":34
 *     @property
 *     def A3(self):
 *         return self.thisptr.A3()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->A3()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":33
 * 
 *     @property
 *     def A3(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A3()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.AngleType.A3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":37
 * 
 *     @property
 *     def Idx(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Idx()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_11Idx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_9AngleType_10Idx[] = "AngleType.Idx(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_11Idx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Idx (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType_10Idx(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_9AngleType_10Idx(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Idx", 0);

  /* "pytraj/core/ParameterTypes.pyx":38
 *     @property
 *     def Idx(self):
 *         return self.thisptr.Idx()             # <<<<<<<<<<<<<<
 * 
 * cdef class NonbondParmType:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->Idx()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":37
 * 
 *     @property
 *     def Idx(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Idx()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.AngleType.Idx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":42
 * cdef class NonbondParmType:
 * 
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         """TODO: add and check"""
 *         cdef int n
 */

/* Python wrapper */
static int __pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.NonbondParmType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType___cinit__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *)__pyx_v_self), __pyx_v_arg);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *__pyx_v_self, PyObject *__pyx_v_arg) {
  CYTHON_UNUSED int __pyx_v_n;
  CYTHON_UNUSED std::vector<int>  __pyx_v_nbi;
  CYTHON_UNUSED PyObject *__pyx_v_nba_ = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_hba_ = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *(*__pyx_t_9)(PyObject *);
  int __pyx_t_10;
  std::vector<int>  __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pytraj/core/ParameterTypes.pyx":49
 *         cdef HB_ParmArray hba
 * 
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _NonbondParmType()
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_arg); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "pytraj/core/ParameterTypes.pyx":50
 * 
 *         if not arg:
 *             self.thisptr = new _NonbondParmType()             # <<<<<<<<<<<<<<
 *         else:
 *             if len(arg) == 4:
 */
    __pyx_v_self->thisptr = new NonbondParmType();

    /* "pytraj/core/ParameterTypes.pyx":49
 *         cdef HB_ParmArray hba
 * 
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _NonbondParmType()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pytraj/core/ParameterTypes.pyx":52
 *             self.thisptr = new _NonbondParmType()
 *         else:
 *             if len(arg) == 4:             # <<<<<<<<<<<<<<
 *                 n, nbi, nba_, hba_ = arg
 *             # to be added
 */
  /*else*/ {
    __pyx_t_3 = PyObject_Length(__pyx_v_arg); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_3 == 4) != 0);
    if (__pyx_t_2) {

      /* "pytraj/core/ParameterTypes.pyx":53
 *         else:
 *             if len(arg) == 4:
 *                 n, nbi, nba_, hba_ = arg             # <<<<<<<<<<<<<<
 *             # to be added
 *             #nba = convert_objlist_to_vector(BondType, nba_, NonbondArray)
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_arg))) || (PyList_CheckExact(__pyx_v_arg))) {
        PyObject* sequence = __pyx_v_arg;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 4)) {
          if (size > 4) __Pyx_RaiseTooManyValuesError(4);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[4] = {&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
          for (i=0; i < 4; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[4] = {&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7};
        __pyx_t_8 = PyObject_GetIter(__pyx_v_arg); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = Py_TYPE(__pyx_t_8)->tp_iternext;
        for (index=0; index < 4; index++) {
          PyObject* item = __pyx_t_9(__pyx_t_8); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_9(__pyx_t_8), 4) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_9 = NULL;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L6_unpacking_done;
        __pyx_L5_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L6_unpacking_done:;
      }
      __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_11 = __pyx_convert_vector_from_py_int(__pyx_t_5); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_n = __pyx_t_10;
      __pyx_v_nbi = __pyx_t_11;
      __pyx_v_nba_ = __pyx_t_6;
      __pyx_t_6 = 0;
      __pyx_v_hba_ = __pyx_t_7;
      __pyx_t_7 = 0;

      /* "pytraj/core/ParameterTypes.pyx":52
 *             self.thisptr = new _NonbondParmType()
 *         else:
 *             if len(arg) == 4:             # <<<<<<<<<<<<<<
 *                 n, nbi, nba_, hba_ = arg
 *             # to be added
 */
    }
  }
  __pyx_L3:;

  /* "pytraj/core/ParameterTypes.pyx":42
 * cdef class NonbondParmType:
 * 
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         """TODO: add and check"""
 *         cdef int n
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.NonbondParmType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_nba_);
  __Pyx_XDECREF(__pyx_v_hba_);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":59
 *             #self.thisptr = new _NonbondParmType(n, nbi, nba, hba)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType_2__dealloc__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pytraj/core/ParameterTypes.pyx":60
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def HasNonbond(self):
 */
  delete __pyx_v_self->thisptr;

  /* "pytraj/core/ParameterTypes.pyx":59
 *             #self.thisptr = new _NonbondParmType(n, nbi, nba, hba)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pytraj/core/ParameterTypes.pyx":62
 *         del self.thisptr
 * 
 *     def HasNonbond(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.HasNonbond()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_5HasNonbond(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_15NonbondParmType_4HasNonbond[] = "NonbondParmType.HasNonbond(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_5HasNonbond(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("HasNonbond (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType_4HasNonbond(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType_4HasNonbond(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("HasNonbond", 0);

  /* "pytraj/core/ParameterTypes.pyx":63
 * 
 *     def HasNonbond(self):
 *         return self.thisptr.HasNonbond()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->HasNonbond()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":62
 *         del self.thisptr
 * 
 *     def HasNonbond(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.HasNonbond()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.NonbondParmType.HasNonbond", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":66
 * 
 *     @property
 *     def Ntypes(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Ntypes()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_7Ntypes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_15NonbondParmType_6Ntypes[] = "NonbondParmType.Ntypes(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_7Ntypes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Ntypes (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType_6Ntypes(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType_6Ntypes(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Ntypes", 0);

  /* "pytraj/core/ParameterTypes.pyx":67
 *     @property
 *     def Ntypes(self):
 *         return self.thisptr.Ntypes()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->Ntypes()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":66
 * 
 *     @property
 *     def Ntypes(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Ntypes()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.NonbondParmType.Ntypes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":70
 * 
 *     @property
 *     def NBindex(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.NBindex()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_9NBindex(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_15NonbondParmType_8NBindex[] = "NonbondParmType.NBindex(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_9NBindex(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("NBindex (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType_8NBindex(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType_8NBindex(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("NBindex", 0);

  /* "pytraj/core/ParameterTypes.pyx":71
 *     @property
 *     def NBindex(self):
 *         return self.thisptr.NBindex()             # <<<<<<<<<<<<<<
 * 
 *     #def  NonbondArray NBarray(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_int(__pyx_v_self->thisptr->NBindex()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":70
 * 
 *     @property
 *     def NBindex(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.NBindex()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.NonbondParmType.NBindex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":91
 *     #def  HB_ParmType HBarray(self,int i):
 * 
 *     def GetLJindex(self,int type1, int type2):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetLJindex(type1, type2)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_11GetLJindex(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_15NonbondParmType_10GetLJindex[] = "NonbondParmType.GetLJindex(self, int type1, int type2)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_11GetLJindex(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_type1;
  int __pyx_v_type2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("GetLJindex (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_type1,&__pyx_n_s_type2,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_type1)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_type2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("GetLJindex", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "GetLJindex") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_type1 = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_type1 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_type2 = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_type2 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("GetLJindex", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.NonbondParmType.GetLJindex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType_10GetLJindex(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *)__pyx_v_self), __pyx_v_type1, __pyx_v_type2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15NonbondParmType_10GetLJindex(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType *__pyx_v_self, int __pyx_v_type1, int __pyx_v_type2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("GetLJindex", 0);

  /* "pytraj/core/ParameterTypes.pyx":92
 * 
 *     def GetLJindex(self,int type1, int type2):
 *         return self.thisptr.GetLJindex(type1, type2)             # <<<<<<<<<<<<<<
 * 
 * cdef class LES_AtomType:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->GetLJindex(__pyx_v_type1, __pyx_v_type2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":91
 *     #def  HB_ParmType HBarray(self,int i):
 * 
 *     def GetLJindex(self,int type1, int type2):             # <<<<<<<<<<<<<<
 *         return self.thisptr.GetLJindex(type1, type2)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.NonbondParmType.GetLJindex", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":95
 * 
 * cdef class LES_AtomType:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new _LES_AtomType()
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pytraj_4core_14ParameterTypes_12LES_AtomType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pytraj_4core_14ParameterTypes_12LES_AtomType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_12LES_AtomType___cinit__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pytraj_4core_14ParameterTypes_12LES_AtomType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pytraj/core/ParameterTypes.pyx":96
 * cdef class LES_AtomType:
 *     def __cinit__(self):
 *         self.thisptr = new _LES_AtomType()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = new LES_AtomType();

  /* "pytraj/core/ParameterTypes.pyx":95
 * 
 * cdef class LES_AtomType:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new _LES_AtomType()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":98
 *         self.thisptr = new _LES_AtomType()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6pytraj_4core_14ParameterTypes_12LES_AtomType_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pytraj_4core_14ParameterTypes_12LES_AtomType_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pytraj_4core_14ParameterTypes_12LES_AtomType_2__dealloc__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pytraj_4core_14ParameterTypes_12LES_AtomType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pytraj/core/ParameterTypes.pyx":99
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     #def LES_AtomType(self):
 */
  delete __pyx_v_self->thisptr;

  /* "pytraj/core/ParameterTypes.pyx":98
 *         self.thisptr = new _LES_AtomType()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pytraj/core/ParameterTypes.pyx":106
 * 
 *     @property
 *     def Type(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Type()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12LES_AtomType_5Type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_12LES_AtomType_4Type[] = "LES_AtomType.Type(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12LES_AtomType_5Type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Type (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_12LES_AtomType_4Type(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12LES_AtomType_4Type(struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Type", 0);

  /* "pytraj/core/ParameterTypes.pyx":107
 *     @property
 *     def Type(self):
 *         return self.thisptr.Type()             # <<<<<<<<<<<<<<
 * 
 *     def Copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->Type()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":106
 * 
 *     @property
 *     def Type(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Type()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.LES_AtomType.Type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":109
 *         return self.thisptr.Type()
 * 
 *     def Copy(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Copy()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12LES_AtomType_7Copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_12LES_AtomType_6Copy[] = "LES_AtomType.Copy(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12LES_AtomType_7Copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Copy (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_12LES_AtomType_6Copy(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12LES_AtomType_6Copy(struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Copy", 0);

  /* "pytraj/core/ParameterTypes.pyx":110
 * 
 *     def Copy(self):
 *         return self.thisptr.Copy()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->Copy()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":109
 *         return self.thisptr.Type()
 * 
 *     def Copy(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Copy()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.LES_AtomType.Copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":113
 * 
 *     @property
 *     def ID(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.ID()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12LES_AtomType_9ID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_12LES_AtomType_8ID[] = "LES_AtomType.ID(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12LES_AtomType_9ID(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("ID (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_12LES_AtomType_8ID(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12LES_AtomType_8ID(struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("ID", 0);

  /* "pytraj/core/ParameterTypes.pyx":114
 *     @property
 *     def ID(self):
 *         return self.thisptr.ID()             # <<<<<<<<<<<<<<
 * 
 * cdef class AngleParmType:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->ID()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":113
 * 
 *     @property
 *     def ID(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.ID()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.LES_AtomType.ID", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":117
 * 
 * cdef class AngleParmType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         cdef double tk, teq
 *         if not arg:
 */

/* Python wrapper */
static int __pyx_pw_6pytraj_4core_14ParameterTypes_13AngleParmType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pytraj_4core_14ParameterTypes_13AngleParmType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.AngleParmType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_13AngleParmType___cinit__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleParmType *)__pyx_v_self), __pyx_v_arg);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pytraj_4core_14ParameterTypes_13AngleParmType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleParmType *__pyx_v_self, PyObject *__pyx_v_arg) {
  double __pyx_v_tk;
  double __pyx_v_teq;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  double __pyx_t_8;
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pytraj/core/ParameterTypes.pyx":119
 *     def __cinit__(self, arg=None):
 *         cdef double tk, teq
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _AngleParmType()
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_arg); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "pytraj/core/ParameterTypes.pyx":120
 *         cdef double tk, teq
 *         if not arg:
 *             self.thisptr = new _AngleParmType()             # <<<<<<<<<<<<<<
 *         else:
 *             if len(arg) == 2:
 */
    __pyx_v_self->thisptr = new AngleParmType();

    /* "pytraj/core/ParameterTypes.pyx":119
 *     def __cinit__(self, arg=None):
 *         cdef double tk, teq
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _AngleParmType()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pytraj/core/ParameterTypes.pyx":122
 *             self.thisptr = new _AngleParmType()
 *         else:
 *             if len(arg) == 2:             # <<<<<<<<<<<<<<
 *                 tk, teq = arg
 *                 self.thisptr = new _AngleParmType(tk, teq)
 */
  /*else*/ {
    __pyx_t_3 = PyObject_Length(__pyx_v_arg); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_3 == 2) != 0);
    if (__pyx_t_2) {

      /* "pytraj/core/ParameterTypes.pyx":123
 *         else:
 *             if len(arg) == 2:
 *                 tk, teq = arg             # <<<<<<<<<<<<<<
 *                 self.thisptr = new _AngleParmType(tk, teq)
 * 
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_arg))) || (PyList_CheckExact(__pyx_v_arg))) {
        PyObject* sequence = __pyx_v_arg;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_6 = PyObject_GetIter(__pyx_v_arg); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
        index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_7 = NULL;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L6_unpacking_done;
        __pyx_L5_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L6_unpacking_done:;
      }
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_tk = __pyx_t_8;
      __pyx_v_teq = __pyx_t_9;

      /* "pytraj/core/ParameterTypes.pyx":124
 *             if len(arg) == 2:
 *                 tk, teq = arg
 *                 self.thisptr = new _AngleParmType(tk, teq)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
      __pyx_v_self->thisptr = new AngleParmType(__pyx_v_tk, __pyx_v_teq);

      /* "pytraj/core/ParameterTypes.pyx":122
 *             self.thisptr = new _AngleParmType()
 *         else:
 *             if len(arg) == 2:             # <<<<<<<<<<<<<<
 *                 tk, teq = arg
 *                 self.thisptr = new _AngleParmType(tk, teq)
 */
    }
  }
  __pyx_L3:;

  /* "pytraj/core/ParameterTypes.pyx":117
 * 
 * cdef class AngleParmType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         cdef double tk, teq
 *         if not arg:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.AngleParmType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":126
 *                 self.thisptr = new _AngleParmType(tk, teq)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6pytraj_4core_14ParameterTypes_13AngleParmType_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pytraj_4core_14ParameterTypes_13AngleParmType_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pytraj_4core_14ParameterTypes_13AngleParmType_2__dealloc__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pytraj_4core_14ParameterTypes_13AngleParmType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleParmType *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pytraj/core/ParameterTypes.pyx":127
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->thisptr;

  /* "pytraj/core/ParameterTypes.pyx":126
 *                 self.thisptr = new _AngleParmType(tk, teq)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pytraj/core/ParameterTypes.pyx":130
 * 
 *     @property
 *     def Tk(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Tk()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_13AngleParmType_5Tk(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_13AngleParmType_4Tk[] = "AngleParmType.Tk(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_13AngleParmType_5Tk(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Tk (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_13AngleParmType_4Tk(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_13AngleParmType_4Tk(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Tk", 0);

  /* "pytraj/core/ParameterTypes.pyx":131
 *     @property
 *     def Tk(self):
 *         return self.thisptr.Tk()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->Tk()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":130
 * 
 *     @property
 *     def Tk(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Tk()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.AngleParmType.Tk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":134
 * 
 *     @property
 *     def Teq(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Teq()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_13AngleParmType_7Teq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_13AngleParmType_6Teq[] = "AngleParmType.Teq(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_13AngleParmType_7Teq(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Teq (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_13AngleParmType_6Teq(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_13AngleParmType_6Teq(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Teq", 0);

  /* "pytraj/core/ParameterTypes.pyx":135
 *     @property
 *     def Teq(self):
 *         return self.thisptr.Teq()             # <<<<<<<<<<<<<<
 * 
 * cdef class CmapType:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->Teq()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":134
 * 
 *     @property
 *     def Teq(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Teq()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.AngleParmType.Teq", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":138
 * 
 * cdef class CmapType:
 *     def __cinit__(self, arg):             # <<<<<<<<<<<<<<
 *         cdef int a1, a2, a3, a4, a5, i
 *         if not arg:
 */

/* Python wrapper */
static int __pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CmapType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType___cinit__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *)__pyx_v_self), __pyx_v_arg);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_self, PyObject *__pyx_v_arg) {
  int __pyx_v_a1;
  int __pyx_v_a2;
  int __pyx_v_a3;
  int __pyx_v_a4;
  int __pyx_v_a5;
  int __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pytraj/core/ParameterTypes.pyx":140
 *     def __cinit__(self, arg):
 *         cdef int a1, a2, a3, a4, a5, i
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _CmapType()
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_arg); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "pytraj/core/ParameterTypes.pyx":141
 *         cdef int a1, a2, a3, a4, a5, i
 *         if not arg:
 *             self.thisptr = new _CmapType()             # <<<<<<<<<<<<<<
 *         else:
 *             if len(arg) == 6:
 */
    __pyx_v_self->thisptr = new CmapType();

    /* "pytraj/core/ParameterTypes.pyx":140
 *     def __cinit__(self, arg):
 *         cdef int a1, a2, a3, a4, a5, i
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _CmapType()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pytraj/core/ParameterTypes.pyx":143
 *             self.thisptr = new _CmapType()
 *         else:
 *             if len(arg) == 6:             # <<<<<<<<<<<<<<
 *                 a1, a2, a3, a4, a5, i = arg
 *                 self.thisptr = new _CmapType(a1, a2, a3, a4, a5, i)
 */
  /*else*/ {
    __pyx_t_3 = PyObject_Length(__pyx_v_arg); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_3 == 6) != 0);
    if (__pyx_t_2) {

      /* "pytraj/core/ParameterTypes.pyx":144
 *         else:
 *             if len(arg) == 6:
 *                 a1, a2, a3, a4, a5, i = arg             # <<<<<<<<<<<<<<
 *                 self.thisptr = new _CmapType(a1, a2, a3, a4, a5, i)
 * 
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_arg))) || (PyList_CheckExact(__pyx_v_arg))) {
        PyObject* sequence = __pyx_v_arg;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 6)) {
          if (size > 6) __Pyx_RaiseTooManyValuesError(6);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 4); 
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 5); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 4); 
          __pyx_t_9 = PyList_GET_ITEM(sequence, 5); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[6] = {&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
          for (i=0; i < 6; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[6] = {&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8,&__pyx_t_9};
        __pyx_t_10 = PyObject_GetIter(__pyx_v_arg); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
        for (index=0; index < 6; index++) {
          PyObject* item = __pyx_t_11(__pyx_t_10); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_11 = NULL;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L6_unpacking_done;
        __pyx_L5_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_11 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L6_unpacking_done:;
      }
      __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_17 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_17 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_a1 = __pyx_t_12;
      __pyx_v_a2 = __pyx_t_13;
      __pyx_v_a3 = __pyx_t_14;
      __pyx_v_a4 = __pyx_t_15;
      __pyx_v_a5 = __pyx_t_16;
      __pyx_v_i = __pyx_t_17;

      /* "pytraj/core/ParameterTypes.pyx":145
 *             if len(arg) == 6:
 *                 a1, a2, a3, a4, a5, i = arg
 *                 self.thisptr = new _CmapType(a1, a2, a3, a4, a5, i)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
      __pyx_v_self->thisptr = new CmapType(__pyx_v_a1, __pyx_v_a2, __pyx_v_a3, __pyx_v_a4, __pyx_v_a5, __pyx_v_i);

      /* "pytraj/core/ParameterTypes.pyx":143
 *             self.thisptr = new _CmapType()
 *         else:
 *             if len(arg) == 6:             # <<<<<<<<<<<<<<
 *                 a1, a2, a3, a4, a5, i = arg
 *                 self.thisptr = new _CmapType(a1, a2, a3, a4, a5, i)
 */
    }
  }
  __pyx_L3:;

  /* "pytraj/core/ParameterTypes.pyx":138
 * 
 * cdef class CmapType:
 *     def __cinit__(self, arg):             # <<<<<<<<<<<<<<
 *         cdef int a1, a2, a3, a4, a5, i
 *         if not arg:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CmapType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":147
 *                 self.thisptr = new _CmapType(a1, a2, a3, a4, a5, i)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_2__dealloc__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pytraj/core/ParameterTypes.pyx":148
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->thisptr;

  /* "pytraj/core/ParameterTypes.pyx":147
 *                 self.thisptr = new _CmapType(a1, a2, a3, a4, a5, i)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pytraj/core/ParameterTypes.pyx":151
 * 
 *     @property
 *     def A1(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A1()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_5A1(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_8CmapType_4A1[] = "CmapType.A1(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_5A1(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("A1 (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_4A1(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_4A1(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("A1", 0);

  /* "pytraj/core/ParameterTypes.pyx":152
 *     @property
 *     def A1(self):
 *         return self.thisptr.A1()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->A1()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":151
 * 
 *     @property
 *     def A1(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A1()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CmapType.A1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":155
 * 
 *     @property
 *     def A2(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A2()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_7A2(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_8CmapType_6A2[] = "CmapType.A2(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_7A2(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("A2 (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_6A2(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_6A2(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("A2", 0);

  /* "pytraj/core/ParameterTypes.pyx":156
 *     @property
 *     def A2(self):
 *         return self.thisptr.A2()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->A2()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":155
 * 
 *     @property
 *     def A2(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A2()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CmapType.A2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":159
 * 
 *     @property
 *     def A3(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A3()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_9A3(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_8CmapType_8A3[] = "CmapType.A3(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_9A3(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("A3 (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_8A3(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_8A3(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("A3", 0);

  /* "pytraj/core/ParameterTypes.pyx":160
 *     @property
 *     def A3(self):
 *         return self.thisptr.A3()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->A3()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":159
 * 
 *     @property
 *     def A3(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A3()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CmapType.A3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":163
 * 
 *     @property
 *     def A4(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A4()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_11A4(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_8CmapType_10A4[] = "CmapType.A4(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_11A4(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("A4 (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_10A4(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_10A4(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("A4", 0);

  /* "pytraj/core/ParameterTypes.pyx":164
 *     @property
 *     def A4(self):
 *         return self.thisptr.A4()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->A4()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":163
 * 
 *     @property
 *     def A4(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A4()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CmapType.A4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":167
 * 
 *     @property
 *     def A5(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A5()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_13A5(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_8CmapType_12A5[] = "CmapType.A5(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_13A5(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("A5 (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_12A5(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_12A5(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("A5", 0);

  /* "pytraj/core/ParameterTypes.pyx":168
 *     @property
 *     def A5(self):
 *         return self.thisptr.A5()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->A5()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 168; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":167
 * 
 *     @property
 *     def A5(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A5()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CmapType.A5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":171
 * 
 *     @property
 *     def Idx(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Idx()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_15Idx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_8CmapType_14Idx[] = "CmapType.Idx(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_15Idx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Idx (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_14Idx(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8CmapType_14Idx(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Idx", 0);

  /* "pytraj/core/ParameterTypes.pyx":172
 *     @property
 *     def Idx(self):
 *         return self.thisptr.Idx()             # <<<<<<<<<<<<<<
 * 
 * # not need LES_ParmType now
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->Idx()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":171
 * 
 *     @property
 *     def Idx(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Idx()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CmapType.Idx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":201
 * 
 * cdef class HB_ParmType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         cdef double a, b, c
 *         if not arg:
 */

/* Python wrapper */
static int __pyx_pw_6pytraj_4core_14ParameterTypes_11HB_ParmType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pytraj_4core_14ParameterTypes_11HB_ParmType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.HB_ParmType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_11HB_ParmType___cinit__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType *)__pyx_v_self), __pyx_v_arg);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pytraj_4core_14ParameterTypes_11HB_ParmType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType *__pyx_v_self, PyObject *__pyx_v_arg) {
  double __pyx_v_a;
  double __pyx_v_b;
  double __pyx_v_c;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  double __pyx_t_9;
  double __pyx_t_10;
  double __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pytraj/core/ParameterTypes.pyx":203
 *     def __cinit__(self, arg=None):
 *         cdef double a, b, c
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _HB_ParmType()
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_arg); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "pytraj/core/ParameterTypes.pyx":204
 *         cdef double a, b, c
 *         if not arg:
 *             self.thisptr = new _HB_ParmType()             # <<<<<<<<<<<<<<
 *         else:
 *             if len(arg) == 3:
 */
    __pyx_v_self->thisptr = new HB_ParmType();

    /* "pytraj/core/ParameterTypes.pyx":203
 *     def __cinit__(self, arg=None):
 *         cdef double a, b, c
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _HB_ParmType()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pytraj/core/ParameterTypes.pyx":206
 *             self.thisptr = new _HB_ParmType()
 *         else:
 *             if len(arg) == 3:             # <<<<<<<<<<<<<<
 *                 a, b, c = arg
 *                 self.thisptr = new _HB_ParmType(a, b, c)
 */
  /*else*/ {
    __pyx_t_3 = PyObject_Length(__pyx_v_arg); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_3 == 3) != 0);
    if (__pyx_t_2) {

      /* "pytraj/core/ParameterTypes.pyx":207
 *         else:
 *             if len(arg) == 3:
 *                 a, b, c = arg             # <<<<<<<<<<<<<<
 *                 self.thisptr = new _HB_ParmType(a, b, c)
 * 
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_arg))) || (PyList_CheckExact(__pyx_v_arg))) {
        PyObject* sequence = __pyx_v_arg;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_7 = PyObject_GetIter(__pyx_v_arg); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
        index = 0; __pyx_t_4 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 2; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L6_unpacking_done;
        __pyx_L5_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L6_unpacking_done:;
      }
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_10 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_11 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_11 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_a = __pyx_t_9;
      __pyx_v_b = __pyx_t_10;
      __pyx_v_c = __pyx_t_11;

      /* "pytraj/core/ParameterTypes.pyx":208
 *             if len(arg) == 3:
 *                 a, b, c = arg
 *                 self.thisptr = new _HB_ParmType(a, b, c)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
      __pyx_v_self->thisptr = new HB_ParmType(__pyx_v_a, __pyx_v_b, __pyx_v_c);

      /* "pytraj/core/ParameterTypes.pyx":206
 *             self.thisptr = new _HB_ParmType()
 *         else:
 *             if len(arg) == 3:             # <<<<<<<<<<<<<<
 *                 a, b, c = arg
 *                 self.thisptr = new _HB_ParmType(a, b, c)
 */
    }
  }
  __pyx_L3:;

  /* "pytraj/core/ParameterTypes.pyx":201
 * 
 * cdef class HB_ParmType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         cdef double a, b, c
 *         if not arg:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.HB_ParmType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":210
 *                 self.thisptr = new _HB_ParmType(a, b, c)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6pytraj_4core_14ParameterTypes_11HB_ParmType_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pytraj_4core_14ParameterTypes_11HB_ParmType_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pytraj_4core_14ParameterTypes_11HB_ParmType_2__dealloc__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pytraj_4core_14ParameterTypes_11HB_ParmType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pytraj/core/ParameterTypes.pyx":211
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->thisptr;

  /* "pytraj/core/ParameterTypes.pyx":210
 *                 self.thisptr = new _HB_ParmType(a, b, c)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pytraj/core/ParameterTypes.pyx":214
 * 
 *     @property
 *     def Asol(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Asol()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11HB_ParmType_5Asol(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_11HB_ParmType_4Asol[] = "HB_ParmType.Asol(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11HB_ParmType_5Asol(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Asol (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_11HB_ParmType_4Asol(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11HB_ParmType_4Asol(struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Asol", 0);

  /* "pytraj/core/ParameterTypes.pyx":215
 *     @property
 *     def Asol(self):
 *         return self.thisptr.Asol()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->Asol()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":214
 * 
 *     @property
 *     def Asol(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Asol()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.HB_ParmType.Asol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":218
 * 
 *     @property
 *     def Bsol(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Bsol()
 *     @property
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11HB_ParmType_7Bsol(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_11HB_ParmType_6Bsol[] = "HB_ParmType.Bsol(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11HB_ParmType_7Bsol(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Bsol (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_11HB_ParmType_6Bsol(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11HB_ParmType_6Bsol(struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Bsol", 0);

  /* "pytraj/core/ParameterTypes.pyx":219
 *     @property
 *     def Bsol(self):
 *         return self.thisptr.Bsol()             # <<<<<<<<<<<<<<
 *     @property
 *     def HBcut(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->Bsol()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":218
 * 
 *     @property
 *     def Bsol(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Bsol()
 *     @property
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.HB_ParmType.Bsol", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":221
 *         return self.thisptr.Bsol()
 *     @property
 *     def HBcut(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.HBcut()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11HB_ParmType_9HBcut(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_11HB_ParmType_8HBcut[] = "HB_ParmType.HBcut(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11HB_ParmType_9HBcut(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("HBcut (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_11HB_ParmType_8HBcut(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11HB_ParmType_8HBcut(struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("HBcut", 0);

  /* "pytraj/core/ParameterTypes.pyx":222
 *     @property
 *     def HBcut(self):
 *         return self.thisptr.HBcut()             # <<<<<<<<<<<<<<
 * 
 * cdef class NonbondType:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->HBcut()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":221
 *         return self.thisptr.Bsol()
 *     @property
 *     def HBcut(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.HBcut()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.HB_ParmType.HBcut", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":225
 * 
 * cdef class NonbondType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         if not arg:
 *             self.thisptr = new _NonbondType()
 */

/* Python wrapper */
static int __pyx_pw_6pytraj_4core_14ParameterTypes_11NonbondType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pytraj_4core_14ParameterTypes_11NonbondType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 225; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.NonbondType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_11NonbondType___cinit__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondType *)__pyx_v_self), __pyx_v_arg);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pytraj_4core_14ParameterTypes_11NonbondType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondType *__pyx_v_self, PyObject *__pyx_v_arg) {
  PyObject *__pyx_v_a = NULL;
  PyObject *__pyx_v_b = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  double __pyx_t_8;
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pytraj/core/ParameterTypes.pyx":226
 * cdef class NonbondType:
 *     def __cinit__(self, arg=None):
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _NonbondType()
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_arg); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "pytraj/core/ParameterTypes.pyx":227
 *     def __cinit__(self, arg=None):
 *         if not arg:
 *             self.thisptr = new _NonbondType()             # <<<<<<<<<<<<<<
 *         else:
 *             if len(arg) == 2:
 */
    __pyx_v_self->thisptr = new NonbondType();

    /* "pytraj/core/ParameterTypes.pyx":226
 * cdef class NonbondType:
 *     def __cinit__(self, arg=None):
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _NonbondType()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pytraj/core/ParameterTypes.pyx":229
 *             self.thisptr = new _NonbondType()
 *         else:
 *             if len(arg) == 2:             # <<<<<<<<<<<<<<
 *                 a, b = arg
 *                 self.thisptr = new _NonbondType(a, b)
 */
  /*else*/ {
    __pyx_t_3 = PyObject_Length(__pyx_v_arg); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 229; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_3 == 2) != 0);
    if (__pyx_t_2) {

      /* "pytraj/core/ParameterTypes.pyx":230
 *         else:
 *             if len(arg) == 2:
 *                 a, b = arg             # <<<<<<<<<<<<<<
 *                 self.thisptr = new _NonbondType(a, b)
 *             else:
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_arg))) || (PyList_CheckExact(__pyx_v_arg))) {
        PyObject* sequence = __pyx_v_arg;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_6 = PyObject_GetIter(__pyx_v_arg); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
        index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_7 = NULL;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L6_unpacking_done;
        __pyx_L5_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L6_unpacking_done:;
      }
      __pyx_v_a = __pyx_t_4;
      __pyx_t_4 = 0;
      __pyx_v_b = __pyx_t_5;
      __pyx_t_5 = 0;

      /* "pytraj/core/ParameterTypes.pyx":231
 *             if len(arg) == 2:
 *                 a, b = arg
 *                 self.thisptr = new _NonbondType(a, b)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError()
 */
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_v_a); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_v_b); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_self->thisptr = new NonbondType(__pyx_t_8, __pyx_t_9);

      /* "pytraj/core/ParameterTypes.pyx":229
 *             self.thisptr = new _NonbondType()
 *         else:
 *             if len(arg) == 2:             # <<<<<<<<<<<<<<
 *                 a, b = arg
 *                 self.thisptr = new _NonbondType(a, b)
 */
      goto __pyx_L4;
    }

    /* "pytraj/core/ParameterTypes.pyx":233
 *                 self.thisptr = new _NonbondType(a, b)
 *             else:
 *                 raise ValueError()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ValueError); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 233; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L4:;
  }
  __pyx_L3:;

  /* "pytraj/core/ParameterTypes.pyx":225
 * 
 * cdef class NonbondType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         if not arg:
 *             self.thisptr = new _NonbondType()
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.NonbondType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_a);
  __Pyx_XDECREF(__pyx_v_b);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":235
 *                 raise ValueError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6pytraj_4core_14ParameterTypes_11NonbondType_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pytraj_4core_14ParameterTypes_11NonbondType_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pytraj_4core_14ParameterTypes_11NonbondType_2__dealloc__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pytraj_4core_14ParameterTypes_11NonbondType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondType *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pytraj/core/ParameterTypes.pyx":236
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->thisptr;

  /* "pytraj/core/ParameterTypes.pyx":235
 *                 raise ValueError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pytraj/core/ParameterTypes.pyx":239
 * 
 *     @property
 *     def A(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11NonbondType_5A(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_11NonbondType_4A[] = "NonbondType.A(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11NonbondType_5A(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("A (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_11NonbondType_4A(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11NonbondType_4A(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("A", 0);

  /* "pytraj/core/ParameterTypes.pyx":240
 *     @property
 *     def A(self):
 *         return self.thisptr.A()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->A()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":239
 * 
 *     @property
 *     def A(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.NonbondType.A", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":243
 * 
 *     @property
 *     def B(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.B()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11NonbondType_7B(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_11NonbondType_6B[] = "NonbondType.B(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11NonbondType_7B(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("B (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_11NonbondType_6B(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11NonbondType_6B(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("B", 0);

  /* "pytraj/core/ParameterTypes.pyx":244
 *     @property
 *     def B(self):
 *         return self.thisptr.B()             # <<<<<<<<<<<<<<
 * 
 * cdef class ChamberParmType:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->B()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":243
 * 
 *     @property
 *     def B(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.B()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.NonbondType.B", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":247
 * 
 * cdef class ChamberParmType:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new _ChamberParmType()
 * 
 */

/* Python wrapper */
static int __pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType___cinit__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pytraj/core/ParameterTypes.pyx":248
 * cdef class ChamberParmType:
 *     def __cinit__(self):
 *         self.thisptr = new _ChamberParmType()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
  __pyx_v_self->thisptr = new ChamberParmType();

  /* "pytraj/core/ParameterTypes.pyx":247
 * 
 * cdef class ChamberParmType:
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.thisptr = new _ChamberParmType()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":250
 *         self.thisptr = new _ChamberParmType()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_2__dealloc__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pytraj/core/ParameterTypes.pyx":251
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def HasChamber(self):
 */
  delete __pyx_v_self->thisptr;

  /* "pytraj/core/ParameterTypes.pyx":250
 *         self.thisptr = new _ChamberParmType()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pytraj/core/ParameterTypes.pyx":253
 *         del self.thisptr
 * 
 *     def HasChamber(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.HasChamber()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_5HasChamber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_15ChamberParmType_4HasChamber[] = "ChamberParmType.HasChamber(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_5HasChamber(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("HasChamber (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_4HasChamber(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_4HasChamber(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("HasChamber", 0);

  /* "pytraj/core/ParameterTypes.pyx":254
 * 
 *     def HasChamber(self):
 *         return self.thisptr.HasChamber()             # <<<<<<<<<<<<<<
 * 
 *     def HasCmap(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->HasChamber()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":253
 *         del self.thisptr
 * 
 *     def HasChamber(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.HasChamber()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.ChamberParmType.HasChamber", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":256
 *         return self.thisptr.HasChamber()
 * 
 *     def HasCmap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.HasCmap()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_7HasCmap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_15ChamberParmType_6HasCmap[] = "ChamberParmType.HasCmap(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_7HasCmap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("HasCmap (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_6HasCmap(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_6HasCmap(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("HasCmap", 0);

  /* "pytraj/core/ParameterTypes.pyx":257
 * 
 *     def HasCmap(self):
 *         return self.thisptr.HasCmap()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->HasCmap()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":256
 *         return self.thisptr.HasChamber()
 * 
 *     def HasCmap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.HasCmap()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.ChamberParmType.HasCmap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":260
 * 
 *     @property
 *     def FF_Version(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.FF_Version()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_9FF_Version(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_15ChamberParmType_8FF_Version[] = "ChamberParmType.FF_Version(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_9FF_Version(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FF_Version (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_8FF_Version(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_8FF_Version(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FF_Version", 0);

  /* "pytraj/core/ParameterTypes.pyx":261
 *     @property
 *     def FF_Version(self):
 *         return self.thisptr.FF_Version()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->FF_Version()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":260
 * 
 *     @property
 *     def FF_Version(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.FF_Version()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.ChamberParmType.FF_Version", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":264
 * 
 *     @property
 *     def FF_Type(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.FF_Type()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_11FF_Type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_15ChamberParmType_10FF_Type[] = "ChamberParmType.FF_Type(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_11FF_Type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("FF_Type (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_10FF_Type(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_10FF_Type(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("FF_Type", 0);

  /* "pytraj/core/ParameterTypes.pyx":265
 *     @property
 *     def FF_Type(self):
 *         return self.thisptr.FF_Type()             # <<<<<<<<<<<<<<
 * 
 *     #def  BondArray UB(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_PyBytes_string_to_py_std__in_string(__pyx_v_self->thisptr->FF_Type()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":264
 * 
 *     @property
 *     def FF_Type(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.FF_Type()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.ChamberParmType.FF_Type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":284
 *     #    self.thisptr.SetLJ14(nb)
 * 
 *     def SetChamber(self,int i, string s):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetChamber(i, s)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_13SetChamber(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_15ChamberParmType_12SetChamber[] = "ChamberParmType.SetChamber(self, int i, string s)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_13SetChamber(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_i;
  std::string __pyx_v_s;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetChamber (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_i,&__pyx_n_s_s,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_i)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("SetChamber", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "SetChamber") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_i = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_s = __pyx_convert_string_from_py_std__in_string(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetChamber", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.ChamberParmType.SetChamber", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_12SetChamber(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *)__pyx_v_self), __pyx_v_i, __pyx_v_s);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_12SetChamber(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self, int __pyx_v_i, std::string __pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetChamber", 0);

  /* "pytraj/core/ParameterTypes.pyx":285
 * 
 *     def SetChamber(self,int i, string s):
 *         self.thisptr.SetChamber(i, s)             # <<<<<<<<<<<<<<
 * 
 *     #def SetUB(self, BondArray ub, BondParmArray ubp):
 */
  __pyx_v_self->thisptr->SetChamber(__pyx_v_i, __pyx_v_s);

  /* "pytraj/core/ParameterTypes.pyx":284
 *     #    self.thisptr.SetLJ14(nb)
 * 
 *     def SetChamber(self,int i, string s):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetChamber(i, s)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":290
 *     #    self.thisptr.SetUB(ub, ubp)
 * 
 *     def SetImproper(self, im_py, imp_py):             # <<<<<<<<<<<<<<
 *         cdef DihedralArray im
 *         cdef DihedralParmArray imp
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_15SetImproper(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_15ChamberParmType_14SetImproper[] = "ChamberParmType.SetImproper(self, im_py, imp_py)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_15SetImproper(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_im_py = 0;
  PyObject *__pyx_v_imp_py = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SetImproper (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_im_py,&__pyx_n_s_imp_py,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_im_py)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_imp_py)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("SetImproper", 1, 2, 2, 1); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "SetImproper") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_im_py = values[0];
    __pyx_v_imp_py = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("SetImproper", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.ChamberParmType.SetImproper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_14SetImproper(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *)__pyx_v_self), __pyx_v_im_py, __pyx_v_imp_py);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_14SetImproper(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self, PyObject *__pyx_v_im_py, PyObject *__pyx_v_imp_py) {
  __pyx_t_6pytraj_4core_14ParameterTypes_DihedralArray __pyx_v_im;
  __pyx_t_6pytraj_4core_14ParameterTypes_DihedralParmArray __pyx_v_imp;
  struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *__pyx_v_im_inst = 0;
  struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_imp_inst = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SetImproper", 0);

  /* "pytraj/core/ParameterTypes.pyx":297
 * 
 *         # convert list of im_py to vector of Dihedral
 *         for im_inst in im_py:             # <<<<<<<<<<<<<<
 *             im.push_back(im_inst.thisptr[0])
 *         for imp_inst in imp_py:
 */
  if (likely(PyList_CheckExact(__pyx_v_im_py)) || PyTuple_CheckExact(__pyx_v_im_py)) {
    __pyx_t_1 = __pyx_v_im_py; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_im_py); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_im_inst, ((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "pytraj/core/ParameterTypes.pyx":298
 *         # convert list of im_py to vector of Dihedral
 *         for im_inst in im_py:
 *             im.push_back(im_inst.thisptr[0])             # <<<<<<<<<<<<<<
 *         for imp_inst in imp_py:
 *             imp.push_back(imp_inst.thisptr[0])
 */
    try {
      __pyx_v_im.push_back((__pyx_v_im_inst->thisptr[0]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 298; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "pytraj/core/ParameterTypes.pyx":297
 * 
 *         # convert list of im_py to vector of Dihedral
 *         for im_inst in im_py:             # <<<<<<<<<<<<<<
 *             im.push_back(im_inst.thisptr[0])
 *         for imp_inst in imp_py:
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/core/ParameterTypes.pyx":299
 *         for im_inst in im_py:
 *             im.push_back(im_inst.thisptr[0])
 *         for imp_inst in imp_py:             # <<<<<<<<<<<<<<
 *             imp.push_back(imp_inst.thisptr[0])
 *         self.thisptr.SetImproper(im, imp)
 */
  if (likely(PyList_CheckExact(__pyx_v_imp_py)) || PyTuple_CheckExact(__pyx_v_imp_py)) {
    __pyx_t_1 = __pyx_v_imp_py; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_imp_py); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType))))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_imp_inst, ((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *)__pyx_t_4));
    __pyx_t_4 = 0;

    /* "pytraj/core/ParameterTypes.pyx":300
 *             im.push_back(im_inst.thisptr[0])
 *         for imp_inst in imp_py:
 *             imp.push_back(imp_inst.thisptr[0])             # <<<<<<<<<<<<<<
 *         self.thisptr.SetImproper(im, imp)
 * 
 */
    try {
      __pyx_v_imp.push_back((__pyx_v_imp_inst->thisptr[0]));
    } catch(...) {
      __Pyx_CppExn2PyErr();
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "pytraj/core/ParameterTypes.pyx":299
 *         for im_inst in im_py:
 *             im.push_back(im_inst.thisptr[0])
 *         for imp_inst in imp_py:             # <<<<<<<<<<<<<<
 *             imp.push_back(imp_inst.thisptr[0])
 *         self.thisptr.SetImproper(im, imp)
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "pytraj/core/ParameterTypes.pyx":301
 *         for imp_inst in imp_py:
 *             imp.push_back(imp_inst.thisptr[0])
 *         self.thisptr.SetImproper(im, imp)             # <<<<<<<<<<<<<<
 * 
 *     def AddCmapGrid(self, CmapGridType g):
 */
  __pyx_v_self->thisptr->SetImproper(__pyx_v_im, __pyx_v_imp);

  /* "pytraj/core/ParameterTypes.pyx":290
 *     #    self.thisptr.SetUB(ub, ubp)
 * 
 *     def SetImproper(self, im_py, imp_py):             # <<<<<<<<<<<<<<
 *         cdef DihedralArray im
 *         cdef DihedralParmArray imp
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.ChamberParmType.SetImproper", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_im_inst);
  __Pyx_XDECREF((PyObject *)__pyx_v_imp_inst);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":303
 *         self.thisptr.SetImproper(im, imp)
 * 
 *     def AddCmapGrid(self, CmapGridType g):             # <<<<<<<<<<<<<<
 *         self.thisptr.AddCmapGrid(g.thisptr[0])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_17AddCmapGrid(PyObject *__pyx_v_self, PyObject *__pyx_v_g); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_15ChamberParmType_16AddCmapGrid[] = "ChamberParmType.AddCmapGrid(self, CmapGridType g)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_17AddCmapGrid(PyObject *__pyx_v_self, PyObject *__pyx_v_g) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("AddCmapGrid (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_g), __pyx_ptype_6pytraj_4core_14ParameterTypes_CmapGridType, 1, "g", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_16AddCmapGrid(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *)__pyx_v_self), ((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType *)__pyx_v_g));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_16AddCmapGrid(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self, struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType *__pyx_v_g) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("AddCmapGrid", 0);

  /* "pytraj/core/ParameterTypes.pyx":304
 * 
 *     def AddCmapGrid(self, CmapGridType g):
 *         self.thisptr.AddCmapGrid(g.thisptr[0])             # <<<<<<<<<<<<<<
 * 
 *     def AddCmapTerm(self, CmapType c):
 */
  __pyx_v_self->thisptr->AddCmapGrid((__pyx_v_g->thisptr[0]));

  /* "pytraj/core/ParameterTypes.pyx":303
 *         self.thisptr.SetImproper(im, imp)
 * 
 *     def AddCmapGrid(self, CmapGridType g):             # <<<<<<<<<<<<<<
 *         self.thisptr.AddCmapGrid(g.thisptr[0])
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":306
 *         self.thisptr.AddCmapGrid(g.thisptr[0])
 * 
 *     def AddCmapTerm(self, CmapType c):             # <<<<<<<<<<<<<<
 *         self.thisptr.AddCmapTerm(c.thisptr[0])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_19AddCmapTerm(PyObject *__pyx_v_self, PyObject *__pyx_v_c); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_15ChamberParmType_18AddCmapTerm[] = "ChamberParmType.AddCmapTerm(self, CmapType c)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_19AddCmapTerm(PyObject *__pyx_v_self, PyObject *__pyx_v_c) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("AddCmapTerm (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_c), __pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType, 1, "c", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 306; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_18AddCmapTerm(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *)__pyx_v_self), ((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *)__pyx_v_c));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_15ChamberParmType_18AddCmapTerm(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType *__pyx_v_self, struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("AddCmapTerm", 0);

  /* "pytraj/core/ParameterTypes.pyx":307
 * 
 *     def AddCmapTerm(self, CmapType c):
 *         self.thisptr.AddCmapTerm(c.thisptr[0])             # <<<<<<<<<<<<<<
 * 
 * cdef class BondParmType:
 */
  __pyx_v_self->thisptr->AddCmapTerm((__pyx_v_c->thisptr[0]));

  /* "pytraj/core/ParameterTypes.pyx":306
 *         self.thisptr.AddCmapGrid(g.thisptr[0])
 * 
 *     def AddCmapTerm(self, CmapType c):             # <<<<<<<<<<<<<<
 *         self.thisptr.AddCmapTerm(c.thisptr[0])
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":310
 * 
 * cdef class BondParmType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         cdef double rk, req
 *         if not arg:
 */

/* Python wrapper */
static int __pyx_pw_6pytraj_4core_14ParameterTypes_12BondParmType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pytraj_4core_14ParameterTypes_12BondParmType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.BondParmType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_12BondParmType___cinit__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondParmType *)__pyx_v_self), __pyx_v_arg);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pytraj_4core_14ParameterTypes_12BondParmType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondParmType *__pyx_v_self, PyObject *__pyx_v_arg) {
  double __pyx_v_rk;
  double __pyx_v_req;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  double __pyx_t_8;
  double __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pytraj/core/ParameterTypes.pyx":312
 *     def __cinit__(self, arg=None):
 *         cdef double rk, req
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _BondParmType()
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_arg); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "pytraj/core/ParameterTypes.pyx":313
 *         cdef double rk, req
 *         if not arg:
 *             self.thisptr = new _BondParmType()             # <<<<<<<<<<<<<<
 *         else:
 *             if len(arg) == 2:
 */
    __pyx_v_self->thisptr = new BondParmType();

    /* "pytraj/core/ParameterTypes.pyx":312
 *     def __cinit__(self, arg=None):
 *         cdef double rk, req
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _BondParmType()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pytraj/core/ParameterTypes.pyx":315
 *             self.thisptr = new _BondParmType()
 *         else:
 *             if len(arg) == 2:             # <<<<<<<<<<<<<<
 *                 rk, req = arg
 *                 self.thisptr = new _BondParmType(rk, req)
 */
  /*else*/ {
    __pyx_t_3 = PyObject_Length(__pyx_v_arg); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_3 == 2) != 0);
    if (__pyx_t_2) {

      /* "pytraj/core/ParameterTypes.pyx":316
 *         else:
 *             if len(arg) == 2:
 *                 rk, req = arg             # <<<<<<<<<<<<<<
 *                 self.thisptr = new _BondParmType(rk, req)
 *             else:
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_arg))) || (PyList_CheckExact(__pyx_v_arg))) {
        PyObject* sequence = __pyx_v_arg;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_6 = PyObject_GetIter(__pyx_v_arg); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
        index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_7 = NULL;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L6_unpacking_done;
        __pyx_L5_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L6_unpacking_done:;
      }
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_rk = __pyx_t_8;
      __pyx_v_req = __pyx_t_9;

      /* "pytraj/core/ParameterTypes.pyx":317
 *             if len(arg) == 2:
 *                 rk, req = arg
 *                 self.thisptr = new _BondParmType(rk, req)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError()
 */
      __pyx_v_self->thisptr = new BondParmType(__pyx_v_rk, __pyx_v_req);

      /* "pytraj/core/ParameterTypes.pyx":315
 *             self.thisptr = new _BondParmType()
 *         else:
 *             if len(arg) == 2:             # <<<<<<<<<<<<<<
 *                 rk, req = arg
 *                 self.thisptr = new _BondParmType(rk, req)
 */
      goto __pyx_L4;
    }

    /* "pytraj/core/ParameterTypes.pyx":319
 *                 self.thisptr = new _BondParmType(rk, req)
 *             else:
 *                 raise ValueError()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    /*else*/ {
      __pyx_t_5 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ValueError); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L4:;
  }
  __pyx_L3:;

  /* "pytraj/core/ParameterTypes.pyx":310
 * 
 * cdef class BondParmType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         cdef double rk, req
 *         if not arg:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.BondParmType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":321
 *                 raise ValueError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6pytraj_4core_14ParameterTypes_12BondParmType_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pytraj_4core_14ParameterTypes_12BondParmType_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pytraj_4core_14ParameterTypes_12BondParmType_2__dealloc__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pytraj_4core_14ParameterTypes_12BondParmType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondParmType *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pytraj/core/ParameterTypes.pyx":322
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->thisptr;

  /* "pytraj/core/ParameterTypes.pyx":321
 *                 raise ValueError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pytraj/core/ParameterTypes.pyx":325
 * 
 *     @property
 *     def Rk(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Rk()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12BondParmType_5Rk(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_12BondParmType_4Rk[] = "BondParmType.Rk(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12BondParmType_5Rk(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Rk (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_12BondParmType_4Rk(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12BondParmType_4Rk(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Rk", 0);

  /* "pytraj/core/ParameterTypes.pyx":326
 *     @property
 *     def Rk(self):
 *         return self.thisptr.Rk()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->Rk()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":325
 * 
 *     @property
 *     def Rk(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Rk()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.BondParmType.Rk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":329
 * 
 *     @property
 *     def Req(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Req()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12BondParmType_7Req(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_12BondParmType_6Req[] = "BondParmType.Req(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12BondParmType_7Req(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Req (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_12BondParmType_6Req(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12BondParmType_6Req(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Req", 0);

  /* "pytraj/core/ParameterTypes.pyx":330
 *     @property
 *     def Req(self):
 *         return self.thisptr.Req()             # <<<<<<<<<<<<<<
 * 
 * cdef class CmapGridType:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->Req()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":329
 * 
 *     @property
 *     def Req(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Req()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.BondParmType.Req", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":333
 * 
 * cdef class CmapGridType:
 *     def __cinit__(self, *args):             # <<<<<<<<<<<<<<
 *         cdef int r
 *         cdef vector[double] g
 */

/* Python wrapper */
static int __pyx_pw_6pytraj_4core_14ParameterTypes_12CmapGridType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pytraj_4core_14ParameterTypes_12CmapGridType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_12CmapGridType___cinit__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pytraj_4core_14ParameterTypes_12CmapGridType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType *__pyx_v_self, PyObject *__pyx_v_args) {
  int __pyx_v_r;
  std::vector<double>  __pyx_v_g;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  std::vector<double>  __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pytraj/core/ParameterTypes.pyx":336
 *         cdef int r
 *         cdef vector[double] g
 *         if not args:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _CmapGridType()
 *         else:
 */
  __pyx_t_1 = (__pyx_v_args != Py_None) && (PyTuple_GET_SIZE(__pyx_v_args) != 0);
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "pytraj/core/ParameterTypes.pyx":337
 *         cdef vector[double] g
 *         if not args:
 *             self.thisptr = new _CmapGridType()             # <<<<<<<<<<<<<<
 *         else:
 *             if len(args) == 2:
 */
    __pyx_v_self->thisptr = new CmapGridType();

    /* "pytraj/core/ParameterTypes.pyx":336
 *         cdef int r
 *         cdef vector[double] g
 *         if not args:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _CmapGridType()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pytraj/core/ParameterTypes.pyx":339
 *             self.thisptr = new _CmapGridType()
 *         else:
 *             if len(args) == 2:             # <<<<<<<<<<<<<<
 *                 r, g = args
 *                 self.thisptr = new _CmapGridType(r, g)
 */
  /*else*/ {
    __pyx_t_3 = PyTuple_GET_SIZE(__pyx_v_args); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_3 == 2) != 0);
    if (__pyx_t_2) {

      /* "pytraj/core/ParameterTypes.pyx":340
 *         else:
 *             if len(args) == 2:
 *                 r, g = args             # <<<<<<<<<<<<<<
 *                 self.thisptr = new _CmapGridType(r, g)
 * 
 */
      if (1) {
        PyObject* sequence = __pyx_v_args;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
        __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
      __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_7 = __pyx_convert_vector_from_py_double(__pyx_t_5); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_r = __pyx_t_6;
      __pyx_v_g = __pyx_t_7;

      /* "pytraj/core/ParameterTypes.pyx":341
 *             if len(args) == 2:
 *                 r, g = args
 *                 self.thisptr = new _CmapGridType(r, g)             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
      __pyx_v_self->thisptr = new CmapGridType(__pyx_v_r, __pyx_v_g);

      /* "pytraj/core/ParameterTypes.pyx":339
 *             self.thisptr = new _CmapGridType()
 *         else:
 *             if len(args) == 2:             # <<<<<<<<<<<<<<
 *                 r, g = args
 *                 self.thisptr = new _CmapGridType(r, g)
 */
    }
  }
  __pyx_L3:;

  /* "pytraj/core/ParameterTypes.pyx":333
 * 
 * cdef class CmapGridType:
 *     def __cinit__(self, *args):             # <<<<<<<<<<<<<<
 *         cdef int r
 *         cdef vector[double] g
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CmapGridType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":343
 *                 self.thisptr = new _CmapGridType(r, g)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6pytraj_4core_14ParameterTypes_12CmapGridType_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pytraj_4core_14ParameterTypes_12CmapGridType_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pytraj_4core_14ParameterTypes_12CmapGridType_2__dealloc__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pytraj_4core_14ParameterTypes_12CmapGridType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pytraj/core/ParameterTypes.pyx":344
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->thisptr;

  /* "pytraj/core/ParameterTypes.pyx":343
 *                 self.thisptr = new _CmapGridType(r, g)
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pytraj/core/ParameterTypes.pyx":347
 * 
 *     @property
 *     def resolution(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Resolution()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12CmapGridType_5resolution(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_12CmapGridType_4resolution[] = "CmapGridType.resolution(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12CmapGridType_5resolution(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("resolution (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_12CmapGridType_4resolution(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12CmapGridType_4resolution(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("resolution", 0);

  /* "pytraj/core/ParameterTypes.pyx":348
 *     @property
 *     def resolution(self):
 *         return self.thisptr.Resolution()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->Resolution()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":347
 * 
 *     @property
 *     def resolution(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Resolution()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CmapGridType.resolution", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":351
 * 
 *     @property
 *     def grid(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Grid()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12CmapGridType_7grid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_12CmapGridType_6grid[] = "CmapGridType.grid(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12CmapGridType_7grid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("grid (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_12CmapGridType_6grid(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12CmapGridType_6grid(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("grid", 0);

  /* "pytraj/core/ParameterTypes.pyx":352
 *     @property
 *     def grid(self):
 *         return self.thisptr.Grid()             # <<<<<<<<<<<<<<
 * 
 * cdef class DihedralType:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_double(__pyx_v_self->thisptr->Grid()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":351
 * 
 *     @property
 *     def grid(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Grid()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CmapGridType.grid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":355
 * 
 * cdef class DihedralType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         cdef int a1, a2, a3, a4, idx, i
 *         cdef Dtype t
 */

/* Python wrapper */
static int __pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 355; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.DihedralType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType___cinit__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *)__pyx_v_self), __pyx_v_arg);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *__pyx_v_self, PyObject *__pyx_v_arg) {
  int __pyx_v_a1;
  int __pyx_v_a2;
  int __pyx_v_a3;
  int __pyx_v_a4;
  int __pyx_v_idx;
  int __pyx_v_i;
  DihedralType::Dtype __pyx_v_t;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  PyObject *__pyx_t_16 = NULL;
  DihedralType::Dtype __pyx_t_17;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pytraj/core/ParameterTypes.pyx":358
 *         cdef int a1, a2, a3, a4, idx, i
 *         cdef Dtype t
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _DihedralType()
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_arg); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 358; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "pytraj/core/ParameterTypes.pyx":359
 *         cdef Dtype t
 *         if not arg:
 *             self.thisptr = new _DihedralType()             # <<<<<<<<<<<<<<
 *         else:
 *             if len(arg) == 5:
 */
    __pyx_v_self->thisptr = new DihedralType();

    /* "pytraj/core/ParameterTypes.pyx":358
 *         cdef int a1, a2, a3, a4, idx, i
 *         cdef Dtype t
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _DihedralType()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pytraj/core/ParameterTypes.pyx":361
 *             self.thisptr = new _DihedralType()
 *         else:
 *             if len(arg) == 5:             # <<<<<<<<<<<<<<
 *                 a1, a2, a3, a4, idx = arg
 *                 self.thisptr = new _DihedralType(a1, a2, a3, a4, idx)
 */
  /*else*/ {
    __pyx_t_3 = PyObject_Length(__pyx_v_arg); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_3 == 5) != 0);
    if (__pyx_t_2) {

      /* "pytraj/core/ParameterTypes.pyx":362
 *         else:
 *             if len(arg) == 5:
 *                 a1, a2, a3, a4, idx = arg             # <<<<<<<<<<<<<<
 *                 self.thisptr = new _DihedralType(a1, a2, a3, a4, idx)
 *             elif len(arg) == 6:
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_arg))) || (PyList_CheckExact(__pyx_v_arg))) {
        PyObject* sequence = __pyx_v_arg;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 5)) {
          if (size > 5) __Pyx_RaiseTooManyValuesError(5);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 4); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 4); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[5] = {&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
          for (i=0; i < 5; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[5] = {&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
        __pyx_t_9 = PyObject_GetIter(__pyx_v_arg); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
        for (index=0; index < 5; index++) {
          PyObject* item = __pyx_t_10(__pyx_t_9); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L6_unpacking_done;
        __pyx_L5_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L6_unpacking_done:;
      }
      __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_a1 = __pyx_t_11;
      __pyx_v_a2 = __pyx_t_12;
      __pyx_v_a3 = __pyx_t_13;
      __pyx_v_a4 = __pyx_t_14;
      __pyx_v_idx = __pyx_t_15;

      /* "pytraj/core/ParameterTypes.pyx":363
 *             if len(arg) == 5:
 *                 a1, a2, a3, a4, idx = arg
 *                 self.thisptr = new _DihedralType(a1, a2, a3, a4, idx)             # <<<<<<<<<<<<<<
 *             elif len(arg) == 6:
 *                 a1, a2, a3, a4, t, i = arg
 */
      __pyx_v_self->thisptr = new DihedralType(__pyx_v_a1, __pyx_v_a2, __pyx_v_a3, __pyx_v_a4, __pyx_v_idx);

      /* "pytraj/core/ParameterTypes.pyx":361
 *             self.thisptr = new _DihedralType()
 *         else:
 *             if len(arg) == 5:             # <<<<<<<<<<<<<<
 *                 a1, a2, a3, a4, idx = arg
 *                 self.thisptr = new _DihedralType(a1, a2, a3, a4, idx)
 */
      goto __pyx_L4;
    }

    /* "pytraj/core/ParameterTypes.pyx":364
 *                 a1, a2, a3, a4, idx = arg
 *                 self.thisptr = new _DihedralType(a1, a2, a3, a4, idx)
 *             elif len(arg) == 6:             # <<<<<<<<<<<<<<
 *                 a1, a2, a3, a4, t, i = arg
 *                 self.thisptr = new _DihedralType(a1, a2, a3, a4, t, i)
 */
    __pyx_t_3 = PyObject_Length(__pyx_v_arg); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 364; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_3 == 6) != 0);
    if (__pyx_t_2) {

      /* "pytraj/core/ParameterTypes.pyx":365
 *                 self.thisptr = new _DihedralType(a1, a2, a3, a4, idx)
 *             elif len(arg) == 6:
 *                 a1, a2, a3, a4, t, i = arg             # <<<<<<<<<<<<<<
 *                 self.thisptr = new _DihedralType(a1, a2, a3, a4, t, i)
 *             else:
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_arg))) || (PyList_CheckExact(__pyx_v_arg))) {
        PyObject* sequence = __pyx_v_arg;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 6)) {
          if (size > 6) __Pyx_RaiseTooManyValuesError(6);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 3); 
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 4); 
          __pyx_t_9 = PyTuple_GET_ITEM(sequence, 5); 
        } else {
          __pyx_t_8 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 3); 
          __pyx_t_4 = PyList_GET_ITEM(sequence, 4); 
          __pyx_t_9 = PyList_GET_ITEM(sequence, 5); 
        }
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_9);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[6] = {&__pyx_t_8,&__pyx_t_7,&__pyx_t_6,&__pyx_t_5,&__pyx_t_4,&__pyx_t_9};
          for (i=0; i < 6; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[6] = {&__pyx_t_8,&__pyx_t_7,&__pyx_t_6,&__pyx_t_5,&__pyx_t_4,&__pyx_t_9};
        __pyx_t_16 = PyObject_GetIter(__pyx_v_arg); if (unlikely(!__pyx_t_16)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_16);
        __pyx_t_10 = Py_TYPE(__pyx_t_16)->tp_iternext;
        for (index=0; index < 6; index++) {
          PyObject* item = __pyx_t_10(__pyx_t_16); if (unlikely(!item)) goto __pyx_L7_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_16), 6) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        goto __pyx_L8_unpacking_done;
        __pyx_L7_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_16); __pyx_t_16 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L8_unpacking_done:;
      }
      __pyx_t_15 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_15 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_14 = __Pyx_PyInt_As_int(__pyx_t_7); if (unlikely((__pyx_t_14 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_13 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_13 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_12 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_12 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_17 = ((DihedralType::Dtype)PyInt_AsLong(__pyx_t_4)); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_9); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_v_a1 = __pyx_t_15;
      __pyx_v_a2 = __pyx_t_14;
      __pyx_v_a3 = __pyx_t_13;
      __pyx_v_a4 = __pyx_t_12;
      __pyx_v_t = __pyx_t_17;
      __pyx_v_i = __pyx_t_11;

      /* "pytraj/core/ParameterTypes.pyx":366
 *             elif len(arg) == 6:
 *                 a1, a2, a3, a4, t, i = arg
 *                 self.thisptr = new _DihedralType(a1, a2, a3, a4, t, i)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError()
 */
      __pyx_v_self->thisptr = new DihedralType(__pyx_v_a1, __pyx_v_a2, __pyx_v_a3, __pyx_v_a4, __pyx_v_t, __pyx_v_i);

      /* "pytraj/core/ParameterTypes.pyx":364
 *                 a1, a2, a3, a4, idx = arg
 *                 self.thisptr = new _DihedralType(a1, a2, a3, a4, idx)
 *             elif len(arg) == 6:             # <<<<<<<<<<<<<<
 *                 a1, a2, a3, a4, t, i = arg
 *                 self.thisptr = new _DihedralType(a1, a2, a3, a4, t, i)
 */
      goto __pyx_L4;
    }

    /* "pytraj/core/ParameterTypes.pyx":368
 *                 self.thisptr = new _DihedralType(a1, a2, a3, a4, t, i)
 *             else:
 *                 raise ValueError()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    /*else*/ {
      __pyx_t_9 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ValueError); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L4:;
  }
  __pyx_L3:;

  /* "pytraj/core/ParameterTypes.pyx":355
 * 
 * cdef class DihedralType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         cdef int a1, a2, a3, a4, idx, i
 *         cdef Dtype t
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_16);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.DihedralType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":370
 *                 raise ValueError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_2__dealloc__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pytraj/core/ParameterTypes.pyx":371
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->thisptr;

  /* "pytraj/core/ParameterTypes.pyx":370
 *                 raise ValueError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pytraj/core/ParameterTypes.pyx":374
 * 
 *     @property
 *     def A1(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A1()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_5A1(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_12DihedralType_4A1[] = "DihedralType.A1(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_5A1(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("A1 (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_4A1(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_4A1(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("A1", 0);

  /* "pytraj/core/ParameterTypes.pyx":375
 *     @property
 *     def A1(self):
 *         return self.thisptr.A1()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->A1()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 375; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":374
 * 
 *     @property
 *     def A1(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A1()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.DihedralType.A1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":378
 * 
 *     @property
 *     def A2(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A2()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_7A2(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_12DihedralType_6A2[] = "DihedralType.A2(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_7A2(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("A2 (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_6A2(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_6A2(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("A2", 0);

  /* "pytraj/core/ParameterTypes.pyx":379
 *     @property
 *     def A2(self):
 *         return self.thisptr.A2()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->A2()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 379; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":378
 * 
 *     @property
 *     def A2(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A2()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.DihedralType.A2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":382
 * 
 *     @property
 *     def A3(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A3()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_9A3(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_12DihedralType_8A3[] = "DihedralType.A3(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_9A3(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("A3 (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_8A3(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_8A3(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("A3", 0);

  /* "pytraj/core/ParameterTypes.pyx":383
 *     @property
 *     def A3(self):
 *         return self.thisptr.A3()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->A3()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 383; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":382
 * 
 *     @property
 *     def A3(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A3()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.DihedralType.A3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":386
 * 
 *     @property
 *     def A4(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A4()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_11A4(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_12DihedralType_10A4[] = "DihedralType.A4(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_11A4(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("A4 (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_10A4(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_10A4(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("A4", 0);

  /* "pytraj/core/ParameterTypes.pyx":387
 *     @property
 *     def A4(self):
 *         return self.thisptr.A4()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->A4()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 387; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":386
 * 
 *     @property
 *     def A4(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A4()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.DihedralType.A4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":390
 * 
 *     @property
 *     def type(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Type()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_13type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_12DihedralType_12type[] = "DihedralType.type(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_13type(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("type (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_12type(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_12type(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("type", 0);

  /* "pytraj/core/ParameterTypes.pyx":391
 *     @property
 *     def type(self):
 *         return self.thisptr.Type()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyInt_FromLong(__pyx_v_self->thisptr->Type()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 391; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":390
 * 
 *     @property
 *     def type(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Type()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.DihedralType.type", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":394
 * 
 *     @property
 *     def idx(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Idx()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_15idx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_12DihedralType_14idx[] = "DihedralType.idx(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_15idx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("idx (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_14idx(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_12DihedralType_14idx(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("idx", 0);

  /* "pytraj/core/ParameterTypes.pyx":395
 *     @property
 *     def idx(self):
 *         return self.thisptr.Idx()             # <<<<<<<<<<<<<<
 * 
 * cdef class BondType:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->Idx()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 395; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":394
 * 
 *     @property
 *     def idx(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Idx()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.DihedralType.idx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":398
 * 
 * cdef class BondType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         cdef int a1, a2, idx
 *         if not arg:
 */

/* Python wrapper */
static int __pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 398; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.BondType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_8BondType___cinit__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *)__pyx_v_self), __pyx_v_arg);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pytraj_4core_14ParameterTypes_8BondType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *__pyx_v_self, PyObject *__pyx_v_arg) {
  int __pyx_v_a1;
  int __pyx_v_a2;
  int __pyx_v_idx;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pytraj/core/ParameterTypes.pyx":400
 *     def __cinit__(self, arg=None):
 *         cdef int a1, a2, idx
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _BondType()
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_arg); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 400; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "pytraj/core/ParameterTypes.pyx":401
 *         cdef int a1, a2, idx
 *         if not arg:
 *             self.thisptr = new _BondType()             # <<<<<<<<<<<<<<
 *         else:
 *             if len(arg) == 3:
 */
    __pyx_v_self->thisptr = new BondType();

    /* "pytraj/core/ParameterTypes.pyx":400
 *     def __cinit__(self, arg=None):
 *         cdef int a1, a2, idx
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _BondType()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pytraj/core/ParameterTypes.pyx":403
 *             self.thisptr = new _BondType()
 *         else:
 *             if len(arg) == 3:             # <<<<<<<<<<<<<<
 *                 a1, a2, idx = arg
 *                 self.thisptr = new _BondType(a1, a2, idx)
 */
  /*else*/ {
    __pyx_t_3 = PyObject_Length(__pyx_v_arg); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 403; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_3 == 3) != 0);
    if (__pyx_t_2) {

      /* "pytraj/core/ParameterTypes.pyx":404
 *         else:
 *             if len(arg) == 3:
 *                 a1, a2, idx = arg             # <<<<<<<<<<<<<<
 *                 self.thisptr = new _BondType(a1, a2, idx)
 *             else:
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_arg))) || (PyList_CheckExact(__pyx_v_arg))) {
        PyObject* sequence = __pyx_v_arg;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 3)) {
          if (size > 3) __Pyx_RaiseTooManyValuesError(3);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PySequence_ITEM(sequence, 2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_7 = PyObject_GetIter(__pyx_v_arg); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext;
        index = 0; __pyx_t_4 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_5 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        index = 2; __pyx_t_6 = __pyx_t_8(__pyx_t_7); if (unlikely(!__pyx_t_6)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_6);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_8(__pyx_t_7), 3) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_8 = NULL;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L6_unpacking_done;
        __pyx_L5_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_8 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L6_unpacking_done:;
      }
      __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 404; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_v_a1 = __pyx_t_9;
      __pyx_v_a2 = __pyx_t_10;
      __pyx_v_idx = __pyx_t_11;

      /* "pytraj/core/ParameterTypes.pyx":405
 *             if len(arg) == 3:
 *                 a1, a2, idx = arg
 *                 self.thisptr = new _BondType(a1, a2, idx)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError()
 */
      __pyx_v_self->thisptr = new BondType(__pyx_v_a1, __pyx_v_a2, __pyx_v_idx);

      /* "pytraj/core/ParameterTypes.pyx":403
 *             self.thisptr = new _BondType()
 *         else:
 *             if len(arg) == 3:             # <<<<<<<<<<<<<<
 *                 a1, a2, idx = arg
 *                 self.thisptr = new _BondType(a1, a2, idx)
 */
      goto __pyx_L4;
    }

    /* "pytraj/core/ParameterTypes.pyx":407
 *                 self.thisptr = new _BondType(a1, a2, idx)
 *             else:
 *                 raise ValueError()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ValueError); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 407; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L4:;
  }
  __pyx_L3:;

  /* "pytraj/core/ParameterTypes.pyx":398
 * 
 * cdef class BondType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         cdef int a1, a2, idx
 *         if not arg:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.BondType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":409
 *                 raise ValueError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pytraj_4core_14ParameterTypes_8BondType_2__dealloc__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pytraj_4core_14ParameterTypes_8BondType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pytraj/core/ParameterTypes.pyx":410
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->thisptr;

  /* "pytraj/core/ParameterTypes.pyx":409
 *                 raise ValueError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pytraj/core/ParameterTypes.pyx":413
 * 
 *     @property
 *     def A1(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A1()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_5A1(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_8BondType_4A1[] = "BondType.A1(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_5A1(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("A1 (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_8BondType_4A1(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8BondType_4A1(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("A1", 0);

  /* "pytraj/core/ParameterTypes.pyx":414
 *     @property
 *     def A1(self):
 *         return self.thisptr.A1()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->A1()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 414; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":413
 * 
 *     @property
 *     def A1(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A1()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.BondType.A1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":417
 * 
 *     @property
 *     def A2(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A2()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_7A2(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_8BondType_6A2[] = "BondType.A2(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_7A2(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("A2 (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_8BondType_6A2(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8BondType_6A2(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("A2", 0);

  /* "pytraj/core/ParameterTypes.pyx":418
 *     @property
 *     def A2(self):
 *         return self.thisptr.A2()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->A2()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 418; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":417
 * 
 *     @property
 *     def A2(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A2()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.BondType.A2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":421
 * 
 *     @property
 *     def Idx(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Idx()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_9Idx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_8BondType_8Idx[] = "BondType.Idx(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_9Idx(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Idx (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_8BondType_8Idx(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8BondType_8Idx(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Idx", 0);

  /* "pytraj/core/ParameterTypes.pyx":422
 *     @property
 *     def Idx(self):
 *         return self.thisptr.Idx()             # <<<<<<<<<<<<<<
 * 
 *     @Idx.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->Idx()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 422; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":421
 * 
 *     @property
 *     def Idx(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Idx()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.BondType.Idx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":425
 * 
 *     @Idx.setter
 *     def Idx(self,int i):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetIdx(i)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_11Idx(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_8BondType_10Idx[] = "BondType.Idx(self, int i)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_11Idx(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Idx (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.BondType.Idx", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_8BondType_10Idx(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_8BondType_10Idx(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Idx", 0);

  /* "pytraj/core/ParameterTypes.pyx":426
 *     @Idx.setter
 *     def Idx(self,int i):
 *         self.thisptr.SetIdx(i)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_v_self->thisptr->SetIdx(__pyx_v_i);

  /* "pytraj/core/ParameterTypes.pyx":425
 * 
 *     @Idx.setter
 *     def Idx(self,int i):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetIdx(i)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":430
 * 
 * cdef class CapParmType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         cdef int n
 *         cdef double c, x, y, z
 */

/* Python wrapper */
static int __pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 430; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CapParmType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType___cinit__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *)__pyx_v_self), __pyx_v_arg);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *__pyx_v_self, PyObject *__pyx_v_arg) {
  int __pyx_v_n;
  double __pyx_v_c;
  double __pyx_v_x;
  double __pyx_v_y;
  double __pyx_v_z;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  int __pyx_t_11;
  double __pyx_t_12;
  double __pyx_t_13;
  double __pyx_t_14;
  double __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pytraj/core/ParameterTypes.pyx":433
 *         cdef int n
 *         cdef double c, x, y, z
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _CapParmType()
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_arg); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 433; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "pytraj/core/ParameterTypes.pyx":434
 *         cdef double c, x, y, z
 *         if not arg:
 *             self.thisptr = new _CapParmType()             # <<<<<<<<<<<<<<
 *         else:
 *             if len(arg) == 5:
 */
    __pyx_v_self->thisptr = new CapParmType();

    /* "pytraj/core/ParameterTypes.pyx":433
 *         cdef int n
 *         cdef double c, x, y, z
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _CapParmType()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pytraj/core/ParameterTypes.pyx":436
 *             self.thisptr = new _CapParmType()
 *         else:
 *             if len(arg) == 5:             # <<<<<<<<<<<<<<
 *                 n, c, x, y, z = arg
 *                 self.thisptr = new _CapParmType(n, c, x, y, z)
 */
  /*else*/ {
    __pyx_t_3 = PyObject_Length(__pyx_v_arg); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 436; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_3 == 5) != 0);
    if (__pyx_t_2) {

      /* "pytraj/core/ParameterTypes.pyx":437
 *         else:
 *             if len(arg) == 5:
 *                 n, c, x, y, z = arg             # <<<<<<<<<<<<<<
 *                 self.thisptr = new _CapParmType(n, c, x, y, z)
 *             else:
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_arg))) || (PyList_CheckExact(__pyx_v_arg))) {
        PyObject* sequence = __pyx_v_arg;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 5)) {
          if (size > 5) __Pyx_RaiseTooManyValuesError(5);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 3); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 4); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_7 = PyList_GET_ITEM(sequence, 3); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 4); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[5] = {&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
          for (i=0; i < 5; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[5] = {&__pyx_t_4,&__pyx_t_5,&__pyx_t_6,&__pyx_t_7,&__pyx_t_8};
        __pyx_t_9 = PyObject_GetIter(__pyx_v_arg); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
        for (index=0; index < 5; index++) {
          PyObject* item = __pyx_t_10(__pyx_t_9); if (unlikely(!item)) goto __pyx_L5_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L6_unpacking_done;
        __pyx_L5_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L6_unpacking_done:;
      }
      __pyx_t_11 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_11 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_12 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_12 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_7); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 437; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_n = __pyx_t_11;
      __pyx_v_c = __pyx_t_12;
      __pyx_v_x = __pyx_t_13;
      __pyx_v_y = __pyx_t_14;
      __pyx_v_z = __pyx_t_15;

      /* "pytraj/core/ParameterTypes.pyx":438
 *             if len(arg) == 5:
 *                 n, c, x, y, z = arg
 *                 self.thisptr = new _CapParmType(n, c, x, y, z)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError()
 */
      __pyx_v_self->thisptr = new CapParmType(__pyx_v_n, __pyx_v_c, __pyx_v_x, __pyx_v_y, __pyx_v_z);

      /* "pytraj/core/ParameterTypes.pyx":436
 *             self.thisptr = new _CapParmType()
 *         else:
 *             if len(arg) == 5:             # <<<<<<<<<<<<<<
 *                 n, c, x, y, z = arg
 *                 self.thisptr = new _CapParmType(n, c, x, y, z)
 */
      goto __pyx_L4;
    }

    /* "pytraj/core/ParameterTypes.pyx":440
 *                 self.thisptr = new _CapParmType(n, c, x, y, z)
 *             else:
 *                 raise ValueError()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    /*else*/ {
      __pyx_t_8 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ValueError); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 440; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L4:;
  }
  __pyx_L3:;

  /* "pytraj/core/ParameterTypes.pyx":430
 * 
 * cdef class CapParmType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         cdef int n
 *         cdef double c, x, y, z
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CapParmType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":442
 *                 raise ValueError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_2__dealloc__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pytraj/core/ParameterTypes.pyx":443
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     def has_water_cap(self):
 */
  delete __pyx_v_self->thisptr;

  /* "pytraj/core/ParameterTypes.pyx":442
 *                 raise ValueError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pytraj/core/ParameterTypes.pyx":445
 *         del self.thisptr
 * 
 *     def has_water_cap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.HasWaterCap()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_5has_water_cap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_11CapParmType_4has_water_cap[] = "CapParmType.has_water_cap(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_5has_water_cap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("has_water_cap (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_4has_water_cap(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_4has_water_cap(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("has_water_cap", 0);

  /* "pytraj/core/ParameterTypes.pyx":446
 * 
 *     def has_water_cap(self):
 *         return self.thisptr.HasWaterCap()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->thisptr->HasWaterCap()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 446; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":445
 *         del self.thisptr
 * 
 *     def has_water_cap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.HasWaterCap()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CapParmType.has_water_cap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":449
 * 
 *     @property
 *     def NatCap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.NatCap()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_7NatCap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_11CapParmType_6NatCap[] = "CapParmType.NatCap(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_7NatCap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("NatCap (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_6NatCap(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_6NatCap(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("NatCap", 0);

  /* "pytraj/core/ParameterTypes.pyx":450
 *     @property
 *     def NatCap(self):
 *         return self.thisptr.NatCap()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->thisptr->NatCap()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 450; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":449
 * 
 *     @property
 *     def NatCap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.NatCap()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CapParmType.NatCap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":453
 * 
 *     @property
 *     def CutCap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.CutCap()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_9CutCap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_11CapParmType_8CutCap[] = "CapParmType.CutCap(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_9CutCap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("CutCap (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_8CutCap(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_8CutCap(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("CutCap", 0);

  /* "pytraj/core/ParameterTypes.pyx":454
 *     @property
 *     def CutCap(self):
 *         return self.thisptr.CutCap()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->CutCap()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 454; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":453
 * 
 *     @property
 *     def CutCap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.CutCap()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CapParmType.CutCap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":457
 * 
 *     @property
 *     def xCap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.xCap()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_11xCap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_11CapParmType_10xCap[] = "CapParmType.xCap(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_11xCap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("xCap (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_10xCap(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_10xCap(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("xCap", 0);

  /* "pytraj/core/ParameterTypes.pyx":458
 *     @property
 *     def xCap(self):
 *         return self.thisptr.xCap()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->xCap()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 458; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":457
 * 
 *     @property
 *     def xCap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.xCap()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CapParmType.xCap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":461
 * 
 *     @property
 *     def yCap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.yCap()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_13yCap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_11CapParmType_12yCap[] = "CapParmType.yCap(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_13yCap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("yCap (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_12yCap(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_12yCap(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("yCap", 0);

  /* "pytraj/core/ParameterTypes.pyx":462
 *     @property
 *     def yCap(self):
 *         return self.thisptr.yCap()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->yCap()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 462; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":461
 * 
 *     @property
 *     def yCap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.yCap()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CapParmType.yCap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":465
 * 
 *     @property
 *     def zCap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.zCap()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_15zCap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_11CapParmType_14zCap[] = "CapParmType.zCap(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_15zCap(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("zCap (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_14zCap(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_11CapParmType_14zCap(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("zCap", 0);

  /* "pytraj/core/ParameterTypes.pyx":466
 *     @property
 *     def zCap(self):
 *         return self.thisptr.zCap()             # <<<<<<<<<<<<<<
 * 
 * cdef class DihedralParmType:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->zCap()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 466; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":465
 * 
 *     @property
 *     def zCap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.zCap()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.CapParmType.zCap", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":469
 * 
 * cdef class DihedralParmType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         cdef double k, n, p, e, b
 *         if not arg:
 */

/* Python wrapper */
static int __pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arg = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_arg,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_arg);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_arg = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 469; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.DihedralParmType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType___cinit__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *)__pyx_v_self), __pyx_v_arg);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType___cinit__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self, PyObject *__pyx_v_arg) {
  double __pyx_v_k;
  double __pyx_v_n;
  double __pyx_v_p;
  double __pyx_v_e;
  double __pyx_v_b;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *(*__pyx_t_7)(PyObject *);
  double __pyx_t_8;
  double __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  double __pyx_t_13;
  double __pyx_t_14;
  double __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "pytraj/core/ParameterTypes.pyx":471
 *     def __cinit__(self, arg=None):
 *         cdef double k, n, p, e, b
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _DihedralParmType()
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_arg); if (unlikely(__pyx_t_1 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 471; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "pytraj/core/ParameterTypes.pyx":472
 *         cdef double k, n, p, e, b
 *         if not arg:
 *             self.thisptr = new _DihedralParmType()             # <<<<<<<<<<<<<<
 *         else:
 *             if len(arg) == 2:
 */
    __pyx_v_self->thisptr = new DihedralParmType();

    /* "pytraj/core/ParameterTypes.pyx":471
 *     def __cinit__(self, arg=None):
 *         cdef double k, n, p, e, b
 *         if not arg:             # <<<<<<<<<<<<<<
 *             self.thisptr = new _DihedralParmType()
 *         else:
 */
    goto __pyx_L3;
  }

  /* "pytraj/core/ParameterTypes.pyx":474
 *             self.thisptr = new _DihedralParmType()
 *         else:
 *             if len(arg) == 2:             # <<<<<<<<<<<<<<
 *                 k ,p = arg
 *                 self.thisptr = new _DihedralParmType(k, p)
 */
  /*else*/ {
    __pyx_t_3 = PyObject_Length(__pyx_v_arg); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 474; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_3 == 2) != 0);
    if (__pyx_t_2) {

      /* "pytraj/core/ParameterTypes.pyx":475
 *         else:
 *             if len(arg) == 2:
 *                 k ,p = arg             # <<<<<<<<<<<<<<
 *                 self.thisptr = new _DihedralParmType(k, p)
 *             elif len(arg) == 5:
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_arg))) || (PyList_CheckExact(__pyx_v_arg))) {
        PyObject* sequence = __pyx_v_arg;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_4 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_5 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        #else
        __pyx_t_4 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        Py_ssize_t index = -1;
        __pyx_t_6 = PyObject_GetIter(__pyx_v_arg); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_7 = Py_TYPE(__pyx_t_6)->tp_iternext;
        index = 0; __pyx_t_4 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_4)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_4);
        index = 1; __pyx_t_5 = __pyx_t_7(__pyx_t_6); if (unlikely(!__pyx_t_5)) goto __pyx_L5_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_5);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_6), 2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_7 = NULL;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        goto __pyx_L6_unpacking_done;
        __pyx_L5_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_7 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L6_unpacking_done:;
      }
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 475; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_k = __pyx_t_8;
      __pyx_v_p = __pyx_t_9;

      /* "pytraj/core/ParameterTypes.pyx":476
 *             if len(arg) == 2:
 *                 k ,p = arg
 *                 self.thisptr = new _DihedralParmType(k, p)             # <<<<<<<<<<<<<<
 *             elif len(arg) == 5:
 *                 k, n, p, e, b = arg
 */
      __pyx_v_self->thisptr = new DihedralParmType(__pyx_v_k, __pyx_v_p);

      /* "pytraj/core/ParameterTypes.pyx":474
 *             self.thisptr = new _DihedralParmType()
 *         else:
 *             if len(arg) == 2:             # <<<<<<<<<<<<<<
 *                 k ,p = arg
 *                 self.thisptr = new _DihedralParmType(k, p)
 */
      goto __pyx_L4;
    }

    /* "pytraj/core/ParameterTypes.pyx":477
 *                 k ,p = arg
 *                 self.thisptr = new _DihedralParmType(k, p)
 *             elif len(arg) == 5:             # <<<<<<<<<<<<<<
 *                 k, n, p, e, b = arg
 *                 self.thisptr = new _DihedralParmType(k, n, p, e, b)
 */
    __pyx_t_3 = PyObject_Length(__pyx_v_arg); if (unlikely(__pyx_t_3 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 477; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = ((__pyx_t_3 == 5) != 0);
    if (__pyx_t_2) {

      /* "pytraj/core/ParameterTypes.pyx":478
 *                 self.thisptr = new _DihedralParmType(k, p)
 *             elif len(arg) == 5:
 *                 k, n, p, e, b = arg             # <<<<<<<<<<<<<<
 *                 self.thisptr = new _DihedralParmType(k, n, p, e, b)
 *             else:
 */
      if ((likely(PyTuple_CheckExact(__pyx_v_arg))) || (PyList_CheckExact(__pyx_v_arg))) {
        PyObject* sequence = __pyx_v_arg;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 5)) {
          if (size > 5) __Pyx_RaiseTooManyValuesError(5);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_5 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyTuple_GET_ITEM(sequence, 2); 
          __pyx_t_10 = PyTuple_GET_ITEM(sequence, 3); 
          __pyx_t_11 = PyTuple_GET_ITEM(sequence, 4); 
        } else {
          __pyx_t_5 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_4 = PyList_GET_ITEM(sequence, 1); 
          __pyx_t_6 = PyList_GET_ITEM(sequence, 2); 
          __pyx_t_10 = PyList_GET_ITEM(sequence, 3); 
          __pyx_t_11 = PyList_GET_ITEM(sequence, 4); 
        }
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(__pyx_t_11);
        #else
        {
          Py_ssize_t i;
          PyObject** temps[5] = {&__pyx_t_5,&__pyx_t_4,&__pyx_t_6,&__pyx_t_10,&__pyx_t_11};
          for (i=0; i < 5; i++) {
            PyObject* item = PySequence_ITEM(sequence, i); if (unlikely(!item)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
            __Pyx_GOTREF(item);
            *(temps[i]) = item;
          }
        }
        #endif
      } else {
        Py_ssize_t index = -1;
        PyObject** temps[5] = {&__pyx_t_5,&__pyx_t_4,&__pyx_t_6,&__pyx_t_10,&__pyx_t_11};
        __pyx_t_12 = PyObject_GetIter(__pyx_v_arg); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __pyx_t_7 = Py_TYPE(__pyx_t_12)->tp_iternext;
        for (index=0; index < 5; index++) {
          PyObject* item = __pyx_t_7(__pyx_t_12); if (unlikely(!item)) goto __pyx_L7_unpacking_failed;
          __Pyx_GOTREF(item);
          *(temps[index]) = item;
        }
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_7(__pyx_t_12), 5) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_t_7 = NULL;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        goto __pyx_L8_unpacking_done;
        __pyx_L7_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_t_7 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __pyx_L8_unpacking_done:;
      }
      __pyx_t_9 = __pyx_PyFloat_AsDouble(__pyx_t_5); if (unlikely((__pyx_t_9 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_8 = __pyx_PyFloat_AsDouble(__pyx_t_4); if (unlikely((__pyx_t_8 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_13 = __pyx_PyFloat_AsDouble(__pyx_t_6); if (unlikely((__pyx_t_13 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_14 = __pyx_PyFloat_AsDouble(__pyx_t_10); if (unlikely((__pyx_t_14 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_15 = __pyx_PyFloat_AsDouble(__pyx_t_11); if (unlikely((__pyx_t_15 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 478; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      __pyx_v_k = __pyx_t_9;
      __pyx_v_n = __pyx_t_8;
      __pyx_v_p = __pyx_t_13;
      __pyx_v_e = __pyx_t_14;
      __pyx_v_b = __pyx_t_15;

      /* "pytraj/core/ParameterTypes.pyx":479
 *             elif len(arg) == 5:
 *                 k, n, p, e, b = arg
 *                 self.thisptr = new _DihedralParmType(k, n, p, e, b)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError()
 */
      __pyx_v_self->thisptr = new DihedralParmType(__pyx_v_k, __pyx_v_n, __pyx_v_p, __pyx_v_e, __pyx_v_b);

      /* "pytraj/core/ParameterTypes.pyx":477
 *                 k ,p = arg
 *                 self.thisptr = new _DihedralParmType(k, p)
 *             elif len(arg) == 5:             # <<<<<<<<<<<<<<
 *                 k, n, p, e, b = arg
 *                 self.thisptr = new _DihedralParmType(k, n, p, e, b)
 */
      goto __pyx_L4;
    }

    /* "pytraj/core/ParameterTypes.pyx":481
 *                 self.thisptr = new _DihedralParmType(k, n, p, e, b)
 *             else:
 *                 raise ValueError()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(self):
 */
    /*else*/ {
      __pyx_t_11 = __Pyx_PyObject_CallNoArg(__pyx_builtin_ValueError); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_Raise(__pyx_t_11, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      {__pyx_filename = __pyx_f[0]; __pyx_lineno = 481; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_L4:;
  }
  __pyx_L3:;

  /* "pytraj/core/ParameterTypes.pyx":469
 * 
 * cdef class DihedralParmType:
 *     def __cinit__(self, arg=None):             # <<<<<<<<<<<<<<
 *         cdef double k, n, p, e, b
 *         if not arg:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.DihedralParmType.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":483
 *                 raise ValueError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

/* Python wrapper */
static void __pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_2__dealloc__(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_2__dealloc__(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "pytraj/core/ParameterTypes.pyx":484
 * 
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  delete __pyx_v_self->thisptr;

  /* "pytraj/core/ParameterTypes.pyx":483
 *                 raise ValueError()
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "pytraj/core/ParameterTypes.pyx":487
 * 
 *     @property
 *     def Pk(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Pk()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_5Pk(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_16DihedralParmType_4Pk[] = "DihedralParmType.Pk(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_5Pk(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pk (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_4Pk(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_4Pk(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Pk", 0);

  /* "pytraj/core/ParameterTypes.pyx":488
 *     @property
 *     def Pk(self):
 *         return self.thisptr.Pk()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->Pk()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 488; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":487
 * 
 *     @property
 *     def Pk(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Pk()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.DihedralParmType.Pk", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":491
 * 
 *     @property
 *     def Pn(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Pn()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_7Pn(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_16DihedralParmType_6Pn[] = "DihedralParmType.Pn(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_7Pn(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Pn (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_6Pn(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_6Pn(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Pn", 0);

  /* "pytraj/core/ParameterTypes.pyx":492
 *     @property
 *     def Pn(self):
 *         return self.thisptr.Pn()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->Pn()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 492; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":491
 * 
 *     @property
 *     def Pn(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Pn()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.DihedralParmType.Pn", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":495
 * 
 *     @property
 *     def Phase(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Phase()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_9Phase(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_16DihedralParmType_8Phase[] = "DihedralParmType.Phase(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_9Phase(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("Phase (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_8Phase(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_8Phase(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("Phase", 0);

  /* "pytraj/core/ParameterTypes.pyx":496
 *     @property
 *     def Phase(self):
 *         return self.thisptr.Phase()             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->Phase()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 496; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":495
 * 
 *     @property
 *     def Phase(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Phase()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.DihedralParmType.Phase", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":499
 * 
 *     @property
 *     def SCEE(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.SCEE()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_11SCEE(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_16DihedralParmType_10SCEE[] = "DihedralParmType.SCEE(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_11SCEE(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SCEE (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_10SCEE(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_10SCEE(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SCEE", 0);

  /* "pytraj/core/ParameterTypes.pyx":500
 *     @property
 *     def SCEE(self):
 *         return self.thisptr.SCEE()             # <<<<<<<<<<<<<<
 * 
 *     @SCEE.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->SCEE()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 500; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":499
 * 
 *     @property
 *     def SCEE(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.SCEE()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.DihedralParmType.SCEE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":503
 * 
 *     @SCEE.setter
 *     def SCEE(self,double s):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetSCEE(s)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_13SCEE(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_16DihedralParmType_12SCEE[] = "DihedralParmType.SCEE(self, double s)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_13SCEE(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  double __pyx_v_s;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SCEE (wrapper)", 0);
  assert(__pyx_arg_s); {
    __pyx_v_s = __pyx_PyFloat_AsDouble(__pyx_arg_s); if (unlikely((__pyx_v_s == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.DihedralParmType.SCEE", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_12SCEE(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *)__pyx_v_self), ((double)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_12SCEE(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self, double __pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SCEE", 0);

  /* "pytraj/core/ParameterTypes.pyx":504
 *     @SCEE.setter
 *     def SCEE(self,double s):
 *         self.thisptr.SetSCEE(s)             # <<<<<<<<<<<<<<
 * 
 *     @property
 */
  __pyx_v_self->thisptr->SetSCEE(__pyx_v_s);

  /* "pytraj/core/ParameterTypes.pyx":503
 * 
 *     @SCEE.setter
 *     def SCEE(self,double s):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetSCEE(s)
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":507
 * 
 *     @property
 *     def SCNB(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.SCNB()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_15SCNB(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_16DihedralParmType_14SCNB[] = "DihedralParmType.SCNB(self)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_15SCNB(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SCNB (wrapper)", 0);
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_14SCNB(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_14SCNB(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("SCNB", 0);

  /* "pytraj/core/ParameterTypes.pyx":508
 *     @property
 *     def SCNB(self):
 *         return self.thisptr.SCNB()             # <<<<<<<<<<<<<<
 * 
 *     @SCNB.setter
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->SCNB()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 508; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "pytraj/core/ParameterTypes.pyx":507
 * 
 *     @property
 *     def SCNB(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.SCNB()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.DihedralParmType.SCNB", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "pytraj/core/ParameterTypes.pyx":511
 * 
 *     @SCNB.setter
 *     def SCNB(self,double s):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetSCNB(s)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_17SCNB(PyObject *__pyx_v_self, PyObject *__pyx_arg_s); /*proto*/
static char __pyx_doc_6pytraj_4core_14ParameterTypes_16DihedralParmType_16SCNB[] = "DihedralParmType.SCNB(self, double s)";
static PyObject *__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_17SCNB(PyObject *__pyx_v_self, PyObject *__pyx_arg_s) {
  double __pyx_v_s;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SCNB (wrapper)", 0);
  assert(__pyx_arg_s); {
    __pyx_v_s = __pyx_PyFloat_AsDouble(__pyx_arg_s); if (unlikely((__pyx_v_s == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("pytraj.core.ParameterTypes.DihedralParmType.SCNB", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_16SCNB(((struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *)__pyx_v_self), ((double)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6pytraj_4core_14ParameterTypes_16DihedralParmType_16SCNB(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType *__pyx_v_self, double __pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("SCNB", 0);

  /* "pytraj/core/ParameterTypes.pyx":512
 *     @SCNB.setter
 *     def SCNB(self,double s):
 *         self.thisptr.SetSCNB(s)             # <<<<<<<<<<<<<<
 */
  __pyx_v_self->thisptr->SetSCNB(__pyx_v_s);

  /* "pytraj/core/ParameterTypes.pyx":511
 * 
 *     @SCNB.setter
 *     def SCNB(self,double s):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetSCNB(s)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<int>  __pyx_convert_vector_from_py_int(PyObject *__pyx_v_o) {
  std::vector<int>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<int>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_int", 0);

  /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":52
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_item); if (unlikely(__pyx_t_5 == -1 && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":53
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_int")
 * cdef vector[X] __pyx_convert_vector_from_py_int(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<double>  __pyx_convert_vector_from_py_double(PyObject *__pyx_v_o) {
  std::vector<double>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<double>  __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  double __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_double", 0);

  /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[1]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":52
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __pyx_t_5 = __pyx_PyFloat_AsDouble(__pyx_v_item); if (unlikely(__pyx_t_5 == -1.0 && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":53
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_double")
 * cdef vector[X] __pyx_convert_vector_from_py_double(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_double", 0);

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_AngleType(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_AngleType(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pytraj_4core_14ParameterTypes_AngleType[] = {
  {"A1", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_5A1, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_9AngleType_4A1},
  {"A2", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_7A2, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_9AngleType_6A2},
  {"A3", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_9A3, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_9AngleType_8A3},
  {"Idx", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_9AngleType_11Idx, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_9AngleType_10Idx},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pytraj_4core_14ParameterTypes_AngleType = {
  PyVarObject_HEAD_INIT(0, 0)
  "pytraj.core.ParameterTypes.AngleType", /*tp_name*/
  sizeof(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_AngleType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pytraj_4core_14ParameterTypes_AngleType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pytraj_4core_14ParameterTypes_AngleType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_NonbondParmType(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_NonbondParmType(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pytraj_4core_14ParameterTypes_NonbondParmType[] = {
  {"HasNonbond", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_5HasNonbond, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_15NonbondParmType_4HasNonbond},
  {"Ntypes", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_7Ntypes, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_15NonbondParmType_6Ntypes},
  {"NBindex", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_9NBindex, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_15NonbondParmType_8NBindex},
  {"GetLJindex", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_15NonbondParmType_11GetLJindex, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pytraj_4core_14ParameterTypes_15NonbondParmType_10GetLJindex},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pytraj_4core_14ParameterTypes_NonbondParmType = {
  PyVarObject_HEAD_INIT(0, 0)
  "pytraj.core.ParameterTypes.NonbondParmType", /*tp_name*/
  sizeof(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondParmType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_NonbondParmType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pytraj_4core_14ParameterTypes_NonbondParmType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pytraj_4core_14ParameterTypes_NonbondParmType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_LES_AtomType(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pytraj_4core_14ParameterTypes_12LES_AtomType_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_LES_AtomType(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6pytraj_4core_14ParameterTypes_12LES_AtomType_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pytraj_4core_14ParameterTypes_LES_AtomType[] = {
  {"Type", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_12LES_AtomType_5Type, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_12LES_AtomType_4Type},
  {"Copy", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_12LES_AtomType_7Copy, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_12LES_AtomType_6Copy},
  {"ID", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_12LES_AtomType_9ID, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_12LES_AtomType_8ID},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pytraj_4core_14ParameterTypes_LES_AtomType = {
  PyVarObject_HEAD_INIT(0, 0)
  "pytraj.core.ParameterTypes.LES_AtomType", /*tp_name*/
  sizeof(struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_AtomType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_LES_AtomType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pytraj_4core_14ParameterTypes_LES_AtomType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pytraj_4core_14ParameterTypes_LES_AtomType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_AngleParmType(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pytraj_4core_14ParameterTypes_13AngleParmType_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_AngleParmType(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6pytraj_4core_14ParameterTypes_13AngleParmType_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pytraj_4core_14ParameterTypes_AngleParmType[] = {
  {"Tk", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_13AngleParmType_5Tk, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_13AngleParmType_4Tk},
  {"Teq", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_13AngleParmType_7Teq, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_13AngleParmType_6Teq},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pytraj_4core_14ParameterTypes_AngleParmType = {
  PyVarObject_HEAD_INIT(0, 0)
  "pytraj.core.ParameterTypes.AngleParmType", /*tp_name*/
  sizeof(struct __pyx_obj_6pytraj_4core_14ParameterTypes_AngleParmType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_AngleParmType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pytraj_4core_14ParameterTypes_AngleParmType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pytraj_4core_14ParameterTypes_AngleParmType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_CmapType(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_CmapType(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pytraj_4core_14ParameterTypes_CmapType[] = {
  {"A1", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_5A1, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_8CmapType_4A1},
  {"A2", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_7A2, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_8CmapType_6A2},
  {"A3", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_9A3, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_8CmapType_8A3},
  {"A4", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_11A4, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_8CmapType_10A4},
  {"A5", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_13A5, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_8CmapType_12A5},
  {"Idx", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_8CmapType_15Idx, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_8CmapType_14Idx},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pytraj_4core_14ParameterTypes_CmapType = {
  PyVarObject_HEAD_INIT(0, 0)
  "pytraj.core.ParameterTypes.CmapType", /*tp_name*/
  sizeof(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_CmapType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pytraj_4core_14ParameterTypes_CmapType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pytraj_4core_14ParameterTypes_CmapType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_LES_ParmType(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_LES_ParmType(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_6pytraj_4core_14ParameterTypes_LES_ParmType = {
  PyVarObject_HEAD_INIT(0, 0)
  "pytraj.core.ParameterTypes.LES_ParmType", /*tp_name*/
  sizeof(struct __pyx_obj_6pytraj_4core_14ParameterTypes_LES_ParmType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_LES_ParmType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pytraj_4core_14ParameterTypes_LES_ParmType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_HB_ParmType(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pytraj_4core_14ParameterTypes_11HB_ParmType_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_HB_ParmType(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6pytraj_4core_14ParameterTypes_11HB_ParmType_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pytraj_4core_14ParameterTypes_HB_ParmType[] = {
  {"Asol", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_11HB_ParmType_5Asol, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_11HB_ParmType_4Asol},
  {"Bsol", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_11HB_ParmType_7Bsol, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_11HB_ParmType_6Bsol},
  {"HBcut", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_11HB_ParmType_9HBcut, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_11HB_ParmType_8HBcut},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pytraj_4core_14ParameterTypes_HB_ParmType = {
  PyVarObject_HEAD_INIT(0, 0)
  "pytraj.core.ParameterTypes.HB_ParmType", /*tp_name*/
  sizeof(struct __pyx_obj_6pytraj_4core_14ParameterTypes_HB_ParmType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_HB_ParmType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pytraj_4core_14ParameterTypes_HB_ParmType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pytraj_4core_14ParameterTypes_HB_ParmType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_NonbondType(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pytraj_4core_14ParameterTypes_11NonbondType_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_NonbondType(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6pytraj_4core_14ParameterTypes_11NonbondType_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pytraj_4core_14ParameterTypes_NonbondType[] = {
  {"A", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_11NonbondType_5A, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_11NonbondType_4A},
  {"B", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_11NonbondType_7B, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_11NonbondType_6B},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pytraj_4core_14ParameterTypes_NonbondType = {
  PyVarObject_HEAD_INIT(0, 0)
  "pytraj.core.ParameterTypes.NonbondType", /*tp_name*/
  sizeof(struct __pyx_obj_6pytraj_4core_14ParameterTypes_NonbondType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_NonbondType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pytraj_4core_14ParameterTypes_NonbondType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pytraj_4core_14ParameterTypes_NonbondType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_ChamberParmType(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_ChamberParmType(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pytraj_4core_14ParameterTypes_ChamberParmType[] = {
  {"HasChamber", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_5HasChamber, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_15ChamberParmType_4HasChamber},
  {"HasCmap", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_7HasCmap, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_15ChamberParmType_6HasCmap},
  {"FF_Version", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_9FF_Version, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_15ChamberParmType_8FF_Version},
  {"FF_Type", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_11FF_Type, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_15ChamberParmType_10FF_Type},
  {"SetChamber", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_13SetChamber, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pytraj_4core_14ParameterTypes_15ChamberParmType_12SetChamber},
  {"SetImproper", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_15SetImproper, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6pytraj_4core_14ParameterTypes_15ChamberParmType_14SetImproper},
  {"AddCmapGrid", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_17AddCmapGrid, METH_O, __pyx_doc_6pytraj_4core_14ParameterTypes_15ChamberParmType_16AddCmapGrid},
  {"AddCmapTerm", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_15ChamberParmType_19AddCmapTerm, METH_O, __pyx_doc_6pytraj_4core_14ParameterTypes_15ChamberParmType_18AddCmapTerm},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pytraj_4core_14ParameterTypes_ChamberParmType = {
  PyVarObject_HEAD_INIT(0, 0)
  "pytraj.core.ParameterTypes.ChamberParmType", /*tp_name*/
  sizeof(struct __pyx_obj_6pytraj_4core_14ParameterTypes_ChamberParmType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_ChamberParmType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pytraj_4core_14ParameterTypes_ChamberParmType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pytraj_4core_14ParameterTypes_ChamberParmType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_BondParmType(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pytraj_4core_14ParameterTypes_12BondParmType_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_BondParmType(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6pytraj_4core_14ParameterTypes_12BondParmType_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pytraj_4core_14ParameterTypes_BondParmType[] = {
  {"Rk", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_12BondParmType_5Rk, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_12BondParmType_4Rk},
  {"Req", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_12BondParmType_7Req, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_12BondParmType_6Req},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pytraj_4core_14ParameterTypes_BondParmType = {
  PyVarObject_HEAD_INIT(0, 0)
  "pytraj.core.ParameterTypes.BondParmType", /*tp_name*/
  sizeof(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondParmType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_BondParmType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pytraj_4core_14ParameterTypes_BondParmType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pytraj_4core_14ParameterTypes_BondParmType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_CmapGridType(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pytraj_4core_14ParameterTypes_12CmapGridType_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_CmapGridType(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6pytraj_4core_14ParameterTypes_12CmapGridType_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pytraj_4core_14ParameterTypes_CmapGridType[] = {
  {"resolution", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_12CmapGridType_5resolution, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_12CmapGridType_4resolution},
  {"grid", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_12CmapGridType_7grid, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_12CmapGridType_6grid},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pytraj_4core_14ParameterTypes_CmapGridType = {
  PyVarObject_HEAD_INIT(0, 0)
  "pytraj.core.ParameterTypes.CmapGridType", /*tp_name*/
  sizeof(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CmapGridType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_CmapGridType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pytraj_4core_14ParameterTypes_CmapGridType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pytraj_4core_14ParameterTypes_CmapGridType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_DihedralType(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_DihedralType(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pytraj_4core_14ParameterTypes_DihedralType[] = {
  {"A1", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_5A1, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_12DihedralType_4A1},
  {"A2", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_7A2, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_12DihedralType_6A2},
  {"A3", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_9A3, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_12DihedralType_8A3},
  {"A4", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_11A4, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_12DihedralType_10A4},
  {"type", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_13type, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_12DihedralType_12type},
  {"idx", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_12DihedralType_15idx, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_12DihedralType_14idx},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pytraj_4core_14ParameterTypes_DihedralType = {
  PyVarObject_HEAD_INIT(0, 0)
  "pytraj.core.ParameterTypes.DihedralType", /*tp_name*/
  sizeof(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_DihedralType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pytraj_4core_14ParameterTypes_DihedralType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pytraj_4core_14ParameterTypes_DihedralType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_BondType(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_BondType(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pytraj_4core_14ParameterTypes_BondType[] = {
  {"A1", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_5A1, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_8BondType_4A1},
  {"A2", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_7A2, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_8BondType_6A2},
  {"Idx", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_9Idx, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_8BondType_8Idx},
  {"Idx", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_8BondType_11Idx, METH_O, __pyx_doc_6pytraj_4core_14ParameterTypes_8BondType_10Idx},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pytraj_4core_14ParameterTypes_BondType = {
  PyVarObject_HEAD_INIT(0, 0)
  "pytraj.core.ParameterTypes.BondType", /*tp_name*/
  sizeof(struct __pyx_obj_6pytraj_4core_14ParameterTypes_BondType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_BondType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pytraj_4core_14ParameterTypes_BondType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pytraj_4core_14ParameterTypes_BondType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_CapParmType(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_CapParmType(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pytraj_4core_14ParameterTypes_CapParmType[] = {
  {"has_water_cap", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_5has_water_cap, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_11CapParmType_4has_water_cap},
  {"NatCap", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_7NatCap, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_11CapParmType_6NatCap},
  {"CutCap", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_9CutCap, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_11CapParmType_8CutCap},
  {"xCap", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_11xCap, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_11CapParmType_10xCap},
  {"yCap", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_13yCap, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_11CapParmType_12yCap},
  {"zCap", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_11CapParmType_15zCap, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_11CapParmType_14zCap},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pytraj_4core_14ParameterTypes_CapParmType = {
  PyVarObject_HEAD_INIT(0, 0)
  "pytraj.core.ParameterTypes.CapParmType", /*tp_name*/
  sizeof(struct __pyx_obj_6pytraj_4core_14ParameterTypes_CapParmType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_CapParmType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pytraj_4core_14ParameterTypes_CapParmType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pytraj_4core_14ParameterTypes_CapParmType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6pytraj_4core_14ParameterTypes_DihedralParmType(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_DihedralParmType(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6pytraj_4core_14ParameterTypes_DihedralParmType[] = {
  {"Pk", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_5Pk, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_16DihedralParmType_4Pk},
  {"Pn", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_7Pn, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_16DihedralParmType_6Pn},
  {"Phase", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_9Phase, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_16DihedralParmType_8Phase},
  {"SCEE", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_11SCEE, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_16DihedralParmType_10SCEE},
  {"SCEE", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_13SCEE, METH_O, __pyx_doc_6pytraj_4core_14ParameterTypes_16DihedralParmType_12SCEE},
  {"SCNB", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_15SCNB, METH_NOARGS, __pyx_doc_6pytraj_4core_14ParameterTypes_16DihedralParmType_14SCNB},
  {"SCNB", (PyCFunction)__pyx_pw_6pytraj_4core_14ParameterTypes_16DihedralParmType_17SCNB, METH_O, __pyx_doc_6pytraj_4core_14ParameterTypes_16DihedralParmType_16SCNB},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6pytraj_4core_14ParameterTypes_DihedralParmType = {
  PyVarObject_HEAD_INIT(0, 0)
  "pytraj.core.ParameterTypes.DihedralParmType", /*tp_name*/
  sizeof(struct __pyx_obj_6pytraj_4core_14ParameterTypes_DihedralParmType), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6pytraj_4core_14ParameterTypes_DihedralParmType, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6pytraj_4core_14ParameterTypes_DihedralParmType, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6pytraj_4core_14ParameterTypes_DihedralParmType, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "ParameterTypes",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_n_s_A, __pyx_k_A, sizeof(__pyx_k_A), 0, 0, 1, 1},
  {&__pyx_n_s_A1, __pyx_k_A1, sizeof(__pyx_k_A1), 0, 0, 1, 1},
  {&__pyx_n_s_A2, __pyx_k_A2, sizeof(__pyx_k_A2), 0, 0, 1, 1},
  {&__pyx_n_s_A3, __pyx_k_A3, sizeof(__pyx_k_A3), 0, 0, 1, 1},
  {&__pyx_n_s_A4, __pyx_k_A4, sizeof(__pyx_k_A4), 0, 0, 1, 1},
  {&__pyx_n_s_A5, __pyx_k_A5, sizeof(__pyx_k_A5), 0, 0, 1, 1},
  {&__pyx_n_s_Asol, __pyx_k_Asol, sizeof(__pyx_k_Asol), 0, 0, 1, 1},
  {&__pyx_n_s_B, __pyx_k_B, sizeof(__pyx_k_B), 0, 0, 1, 1},
  {&__pyx_n_s_Bsol, __pyx_k_Bsol, sizeof(__pyx_k_Bsol), 0, 0, 1, 1},
  {&__pyx_n_s_CutCap, __pyx_k_CutCap, sizeof(__pyx_k_CutCap), 0, 0, 1, 1},
  {&__pyx_n_s_FF_Type, __pyx_k_FF_Type, sizeof(__pyx_k_FF_Type), 0, 0, 1, 1},
  {&__pyx_n_s_FF_Version, __pyx_k_FF_Version, sizeof(__pyx_k_FF_Version), 0, 0, 1, 1},
  {&__pyx_n_s_HBcut, __pyx_k_HBcut, sizeof(__pyx_k_HBcut), 0, 0, 1, 1},
  {&__pyx_n_s_ID, __pyx_k_ID, sizeof(__pyx_k_ID), 0, 0, 1, 1},
  {&__pyx_n_s_Idx, __pyx_k_Idx, sizeof(__pyx_k_Idx), 0, 0, 1, 1},
  {&__pyx_n_s_NBindex, __pyx_k_NBindex, sizeof(__pyx_k_NBindex), 0, 0, 1, 1},
  {&__pyx_n_s_NatCap, __pyx_k_NatCap, sizeof(__pyx_k_NatCap), 0, 0, 1, 1},
  {&__pyx_n_s_Ntypes, __pyx_k_Ntypes, sizeof(__pyx_k_Ntypes), 0, 0, 1, 1},
  {&__pyx_n_s_Phase, __pyx_k_Phase, sizeof(__pyx_k_Phase), 0, 0, 1, 1},
  {&__pyx_n_s_Pk, __pyx_k_Pk, sizeof(__pyx_k_Pk), 0, 0, 1, 1},
  {&__pyx_n_s_Pn, __pyx_k_Pn, sizeof(__pyx_k_Pn), 0, 0, 1, 1},
  {&__pyx_n_s_Req, __pyx_k_Req, sizeof(__pyx_k_Req), 0, 0, 1, 1},
  {&__pyx_n_s_Rk, __pyx_k_Rk, sizeof(__pyx_k_Rk), 0, 0, 1, 1},
  {&__pyx_n_s_SCEE, __pyx_k_SCEE, sizeof(__pyx_k_SCEE), 0, 0, 1, 1},
  {&__pyx_n_s_SCNB, __pyx_k_SCNB, sizeof(__pyx_k_SCNB), 0, 0, 1, 1},
  {&__pyx_n_s_Teq, __pyx_k_Teq, sizeof(__pyx_k_Teq), 0, 0, 1, 1},
  {&__pyx_n_s_Tk, __pyx_k_Tk, sizeof(__pyx_k_Tk), 0, 0, 1, 1},
  {&__pyx_n_s_Type, __pyx_k_Type, sizeof(__pyx_k_Type), 0, 0, 1, 1},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_arg, __pyx_k_arg, sizeof(__pyx_k_arg), 0, 0, 1, 1},
  {&__pyx_n_s_grid, __pyx_k_grid, sizeof(__pyx_k_grid), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_idx, __pyx_k_idx, sizeof(__pyx_k_idx), 0, 0, 1, 1},
  {&__pyx_n_s_im_py, __pyx_k_im_py, sizeof(__pyx_k_im_py), 0, 0, 1, 1},
  {&__pyx_n_s_imp_py, __pyx_k_imp_py, sizeof(__pyx_k_imp_py), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_property, __pyx_k_property, sizeof(__pyx_k_property), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_resolution, __pyx_k_resolution, sizeof(__pyx_k_resolution), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_n_s_setter, __pyx_k_setter, sizeof(__pyx_k_setter), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_type, __pyx_k_type, sizeof(__pyx_k_type), 0, 0, 1, 1},
  {&__pyx_n_s_type1, __pyx_k_type1, sizeof(__pyx_k_type1), 0, 0, 1, 1},
  {&__pyx_n_s_type2, __pyx_k_type2, sizeof(__pyx_k_type2), 0, 0, 1, 1},
  {&__pyx_n_s_xCap, __pyx_k_xCap, sizeof(__pyx_k_xCap), 0, 0, 1, 1},
  {&__pyx_n_s_yCap, __pyx_k_yCap, sizeof(__pyx_k_yCap), 0, 0, 1, 1},
  {&__pyx_n_s_zCap, __pyx_k_zCap, sizeof(__pyx_k_zCap), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_property = __Pyx_GetBuiltinName(__pyx_n_s_property); if (!__pyx_builtin_property) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);
  __Pyx_RefNannyFinishContext();
  return 0;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initParameterTypes(void); /*proto*/
PyMODINIT_FUNC initParameterTypes(void)
#else
PyMODINIT_FUNC PyInit_ParameterTypes(void); /*proto*/
PyMODINIT_FUNC PyInit_ParameterTypes(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_ParameterTypes(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("ParameterTypes", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_pytraj__core__ParameterTypes) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "pytraj.core.ParameterTypes")) {
      if (unlikely(PyDict_SetItemString(modules, "pytraj.core.ParameterTypes", __pyx_m) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6pytraj_4core_14ParameterTypes_AngleType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pytraj_4core_14ParameterTypes_AngleType.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "AngleType", (PyObject *)&__pyx_type_6pytraj_4core_14ParameterTypes_AngleType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pytraj_4core_14ParameterTypes_AngleType = &__pyx_type_6pytraj_4core_14ParameterTypes_AngleType;
  if (PyType_Ready(&__pyx_type_6pytraj_4core_14ParameterTypes_NonbondParmType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pytraj_4core_14ParameterTypes_NonbondParmType.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "NonbondParmType", (PyObject *)&__pyx_type_6pytraj_4core_14ParameterTypes_NonbondParmType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pytraj_4core_14ParameterTypes_NonbondParmType = &__pyx_type_6pytraj_4core_14ParameterTypes_NonbondParmType;
  if (PyType_Ready(&__pyx_type_6pytraj_4core_14ParameterTypes_LES_AtomType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pytraj_4core_14ParameterTypes_LES_AtomType.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "LES_AtomType", (PyObject *)&__pyx_type_6pytraj_4core_14ParameterTypes_LES_AtomType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pytraj_4core_14ParameterTypes_LES_AtomType = &__pyx_type_6pytraj_4core_14ParameterTypes_LES_AtomType;
  if (PyType_Ready(&__pyx_type_6pytraj_4core_14ParameterTypes_AngleParmType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pytraj_4core_14ParameterTypes_AngleParmType.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "AngleParmType", (PyObject *)&__pyx_type_6pytraj_4core_14ParameterTypes_AngleParmType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pytraj_4core_14ParameterTypes_AngleParmType = &__pyx_type_6pytraj_4core_14ParameterTypes_AngleParmType;
  if (PyType_Ready(&__pyx_type_6pytraj_4core_14ParameterTypes_CmapType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pytraj_4core_14ParameterTypes_CmapType.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "CmapType", (PyObject *)&__pyx_type_6pytraj_4core_14ParameterTypes_CmapType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType = &__pyx_type_6pytraj_4core_14ParameterTypes_CmapType;
  if (PyType_Ready(&__pyx_type_6pytraj_4core_14ParameterTypes_LES_ParmType) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pytraj_4core_14ParameterTypes_LES_ParmType.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "LES_ParmType", (PyObject *)&__pyx_type_6pytraj_4core_14ParameterTypes_LES_ParmType) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pytraj_4core_14ParameterTypes_LES_ParmType = &__pyx_type_6pytraj_4core_14ParameterTypes_LES_ParmType;
  if (PyType_Ready(&__pyx_type_6pytraj_4core_14ParameterTypes_HB_ParmType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pytraj_4core_14ParameterTypes_HB_ParmType.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "HB_ParmType", (PyObject *)&__pyx_type_6pytraj_4core_14ParameterTypes_HB_ParmType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pytraj_4core_14ParameterTypes_HB_ParmType = &__pyx_type_6pytraj_4core_14ParameterTypes_HB_ParmType;
  if (PyType_Ready(&__pyx_type_6pytraj_4core_14ParameterTypes_NonbondType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pytraj_4core_14ParameterTypes_NonbondType.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "NonbondType", (PyObject *)&__pyx_type_6pytraj_4core_14ParameterTypes_NonbondType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pytraj_4core_14ParameterTypes_NonbondType = &__pyx_type_6pytraj_4core_14ParameterTypes_NonbondType;
  if (PyType_Ready(&__pyx_type_6pytraj_4core_14ParameterTypes_ChamberParmType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pytraj_4core_14ParameterTypes_ChamberParmType.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "ChamberParmType", (PyObject *)&__pyx_type_6pytraj_4core_14ParameterTypes_ChamberParmType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 246; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pytraj_4core_14ParameterTypes_ChamberParmType = &__pyx_type_6pytraj_4core_14ParameterTypes_ChamberParmType;
  if (PyType_Ready(&__pyx_type_6pytraj_4core_14ParameterTypes_BondParmType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pytraj_4core_14ParameterTypes_BondParmType.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "BondParmType", (PyObject *)&__pyx_type_6pytraj_4core_14ParameterTypes_BondParmType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pytraj_4core_14ParameterTypes_BondParmType = &__pyx_type_6pytraj_4core_14ParameterTypes_BondParmType;
  if (PyType_Ready(&__pyx_type_6pytraj_4core_14ParameterTypes_CmapGridType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pytraj_4core_14ParameterTypes_CmapGridType.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "CmapGridType", (PyObject *)&__pyx_type_6pytraj_4core_14ParameterTypes_CmapGridType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pytraj_4core_14ParameterTypes_CmapGridType = &__pyx_type_6pytraj_4core_14ParameterTypes_CmapGridType;
  if (PyType_Ready(&__pyx_type_6pytraj_4core_14ParameterTypes_DihedralType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pytraj_4core_14ParameterTypes_DihedralType.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "DihedralType", (PyObject *)&__pyx_type_6pytraj_4core_14ParameterTypes_DihedralType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType = &__pyx_type_6pytraj_4core_14ParameterTypes_DihedralType;
  if (PyType_Ready(&__pyx_type_6pytraj_4core_14ParameterTypes_BondType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pytraj_4core_14ParameterTypes_BondType.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "BondType", (PyObject *)&__pyx_type_6pytraj_4core_14ParameterTypes_BondType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 397; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pytraj_4core_14ParameterTypes_BondType = &__pyx_type_6pytraj_4core_14ParameterTypes_BondType;
  if (PyType_Ready(&__pyx_type_6pytraj_4core_14ParameterTypes_CapParmType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pytraj_4core_14ParameterTypes_CapParmType.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "CapParmType", (PyObject *)&__pyx_type_6pytraj_4core_14ParameterTypes_CapParmType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 429; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pytraj_4core_14ParameterTypes_CapParmType = &__pyx_type_6pytraj_4core_14ParameterTypes_CapParmType;
  if (PyType_Ready(&__pyx_type_6pytraj_4core_14ParameterTypes_DihedralParmType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6pytraj_4core_14ParameterTypes_DihedralParmType.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "DihedralParmType", (PyObject *)&__pyx_type_6pytraj_4core_14ParameterTypes_DihedralParmType) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 468; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType = &__pyx_type_6pytraj_4core_14ParameterTypes_DihedralParmType;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "pytraj/core/ParameterTypes.pyx":25
 * 
 *     @property
 *     def A1(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A1()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleType, __pyx_n_s_A1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":24
 *         del self.thisptr
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def A1(self):
 *         return self.thisptr.A1()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleType->tp_dict, __pyx_n_s_A1, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleType);

  /* "pytraj/core/ParameterTypes.pyx":29
 * 
 *     @property
 *     def A2(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A2()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleType, __pyx_n_s_A2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":28
 *         return self.thisptr.A1()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def A2(self):
 *         return self.thisptr.A2()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleType->tp_dict, __pyx_n_s_A2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleType);

  /* "pytraj/core/ParameterTypes.pyx":33
 * 
 *     @property
 *     def A3(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A3()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleType, __pyx_n_s_A3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":32
 *         return self.thisptr.A2()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def A3(self):
 *         return self.thisptr.A3()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleType->tp_dict, __pyx_n_s_A3, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleType);

  /* "pytraj/core/ParameterTypes.pyx":37
 * 
 *     @property
 *     def Idx(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Idx()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleType, __pyx_n_s_Idx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":36
 *         return self.thisptr.A3()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def Idx(self):
 *         return self.thisptr.Idx()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleType->tp_dict, __pyx_n_s_Idx, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleType);

  /* "pytraj/core/ParameterTypes.pyx":66
 * 
 *     @property
 *     def Ntypes(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Ntypes()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_NonbondParmType, __pyx_n_s_Ntypes); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":65
 *         return self.thisptr.HasNonbond()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def Ntypes(self):
 *         return self.thisptr.Ntypes()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_NonbondParmType->tp_dict, __pyx_n_s_Ntypes, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_NonbondParmType);

  /* "pytraj/core/ParameterTypes.pyx":70
 * 
 *     @property
 *     def NBindex(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.NBindex()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_NonbondParmType, __pyx_n_s_NBindex); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":69
 *         return self.thisptr.Ntypes()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def NBindex(self):
 *         return self.thisptr.NBindex()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_NonbondParmType->tp_dict, __pyx_n_s_NBindex, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_NonbondParmType);

  /* "pytraj/core/ParameterTypes.pyx":106
 * 
 *     @property
 *     def Type(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Type()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_LES_AtomType, __pyx_n_s_Type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":105
 *     #def LES_AtomType(self,int t, int c, int i):
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def Type(self):
 *         return self.thisptr.Type()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_LES_AtomType->tp_dict, __pyx_n_s_Type, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_LES_AtomType);

  /* "pytraj/core/ParameterTypes.pyx":113
 * 
 *     @property
 *     def ID(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.ID()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_LES_AtomType, __pyx_n_s_ID); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":112
 *         return self.thisptr.Copy()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def ID(self):
 *         return self.thisptr.ID()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_LES_AtomType->tp_dict, __pyx_n_s_ID, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_LES_AtomType);

  /* "pytraj/core/ParameterTypes.pyx":130
 * 
 *     @property
 *     def Tk(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Tk()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleParmType, __pyx_n_s_Tk); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":129
 *         del self.thisptr
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def Tk(self):
 *         return self.thisptr.Tk()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleParmType->tp_dict, __pyx_n_s_Tk, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleParmType);

  /* "pytraj/core/ParameterTypes.pyx":134
 * 
 *     @property
 *     def Teq(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Teq()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleParmType, __pyx_n_s_Teq); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":133
 *         return self.thisptr.Tk()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def Teq(self):
 *         return self.thisptr.Teq()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleParmType->tp_dict, __pyx_n_s_Teq, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_AngleParmType);

  /* "pytraj/core/ParameterTypes.pyx":151
 * 
 *     @property
 *     def A1(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A1()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType, __pyx_n_s_A1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":150
 *         del self.thisptr
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def A1(self):
 *         return self.thisptr.A1()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType->tp_dict, __pyx_n_s_A1, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType);

  /* "pytraj/core/ParameterTypes.pyx":155
 * 
 *     @property
 *     def A2(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A2()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType, __pyx_n_s_A2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":154
 *         return self.thisptr.A1()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def A2(self):
 *         return self.thisptr.A2()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType->tp_dict, __pyx_n_s_A2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType);

  /* "pytraj/core/ParameterTypes.pyx":159
 * 
 *     @property
 *     def A3(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A3()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType, __pyx_n_s_A3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":158
 *         return self.thisptr.A2()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def A3(self):
 *         return self.thisptr.A3()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType->tp_dict, __pyx_n_s_A3, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 159; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType);

  /* "pytraj/core/ParameterTypes.pyx":163
 * 
 *     @property
 *     def A4(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A4()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType, __pyx_n_s_A4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":162
 *         return self.thisptr.A3()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def A4(self):
 *         return self.thisptr.A4()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType->tp_dict, __pyx_n_s_A4, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType);

  /* "pytraj/core/ParameterTypes.pyx":167
 * 
 *     @property
 *     def A5(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A5()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType, __pyx_n_s_A5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":166
 *         return self.thisptr.A4()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def A5(self):
 *         return self.thisptr.A5()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType->tp_dict, __pyx_n_s_A5, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType);

  /* "pytraj/core/ParameterTypes.pyx":171
 * 
 *     @property
 *     def Idx(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Idx()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType, __pyx_n_s_Idx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":170
 *         return self.thisptr.A5()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def Idx(self):
 *         return self.thisptr.Idx()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType->tp_dict, __pyx_n_s_Idx, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapType);

  /* "pytraj/core/ParameterTypes.pyx":214
 * 
 *     @property
 *     def Asol(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Asol()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_HB_ParmType, __pyx_n_s_Asol); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":213
 *         del self.thisptr
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def Asol(self):
 *         return self.thisptr.Asol()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 213; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_HB_ParmType->tp_dict, __pyx_n_s_Asol, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_HB_ParmType);

  /* "pytraj/core/ParameterTypes.pyx":218
 * 
 *     @property
 *     def Bsol(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Bsol()
 *     @property
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_HB_ParmType, __pyx_n_s_Bsol); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":217
 *         return self.thisptr.Asol()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def Bsol(self):
 *         return self.thisptr.Bsol()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_HB_ParmType->tp_dict, __pyx_n_s_Bsol, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_HB_ParmType);

  /* "pytraj/core/ParameterTypes.pyx":221
 *         return self.thisptr.Bsol()
 *     @property
 *     def HBcut(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.HBcut()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_HB_ParmType, __pyx_n_s_HBcut); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":220
 *     def Bsol(self):
 *         return self.thisptr.Bsol()
 *     @property             # <<<<<<<<<<<<<<
 *     def HBcut(self):
 *         return self.thisptr.HBcut()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_HB_ParmType->tp_dict, __pyx_n_s_HBcut, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_HB_ParmType);

  /* "pytraj/core/ParameterTypes.pyx":239
 * 
 *     @property
 *     def A(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_NonbondType, __pyx_n_s_A); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":238
 *         del self.thisptr
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def A(self):
 *         return self.thisptr.A()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_NonbondType->tp_dict, __pyx_n_s_A, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_NonbondType);

  /* "pytraj/core/ParameterTypes.pyx":243
 * 
 *     @property
 *     def B(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.B()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_NonbondType, __pyx_n_s_B); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":242
 *         return self.thisptr.A()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def B(self):
 *         return self.thisptr.B()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_NonbondType->tp_dict, __pyx_n_s_B, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_NonbondType);

  /* "pytraj/core/ParameterTypes.pyx":260
 * 
 *     @property
 *     def FF_Version(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.FF_Version()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_ChamberParmType, __pyx_n_s_FF_Version); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":259
 *         return self.thisptr.HasCmap()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def FF_Version(self):
 *         return self.thisptr.FF_Version()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_ChamberParmType->tp_dict, __pyx_n_s_FF_Version, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_ChamberParmType);

  /* "pytraj/core/ParameterTypes.pyx":264
 * 
 *     @property
 *     def FF_Type(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.FF_Type()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_ChamberParmType, __pyx_n_s_FF_Type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":263
 *         return self.thisptr.FF_Version()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def FF_Type(self):
 *         return self.thisptr.FF_Type()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_ChamberParmType->tp_dict, __pyx_n_s_FF_Type, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_ChamberParmType);

  /* "pytraj/core/ParameterTypes.pyx":325
 * 
 *     @property
 *     def Rk(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Rk()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_BondParmType, __pyx_n_s_Rk); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":324
 *         del self.thisptr
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def Rk(self):
 *         return self.thisptr.Rk()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_BondParmType->tp_dict, __pyx_n_s_Rk, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_BondParmType);

  /* "pytraj/core/ParameterTypes.pyx":329
 * 
 *     @property
 *     def Req(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Req()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_BondParmType, __pyx_n_s_Req); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":328
 *         return self.thisptr.Rk()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def Req(self):
 *         return self.thisptr.Req()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_BondParmType->tp_dict, __pyx_n_s_Req, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_BondParmType);

  /* "pytraj/core/ParameterTypes.pyx":347
 * 
 *     @property
 *     def resolution(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Resolution()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapGridType, __pyx_n_s_resolution); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":346
 *         del self.thisptr
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def resolution(self):
 *         return self.thisptr.Resolution()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapGridType->tp_dict, __pyx_n_s_resolution, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapGridType);

  /* "pytraj/core/ParameterTypes.pyx":351
 * 
 *     @property
 *     def grid(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Grid()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapGridType, __pyx_n_s_grid); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":350
 *         return self.thisptr.Resolution()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def grid(self):
 *         return self.thisptr.Grid()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapGridType->tp_dict, __pyx_n_s_grid, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_CmapGridType);

  /* "pytraj/core/ParameterTypes.pyx":374
 * 
 *     @property
 *     def A1(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A1()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType, __pyx_n_s_A1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":373
 *         del self.thisptr
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def A1(self):
 *         return self.thisptr.A1()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 373; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType->tp_dict, __pyx_n_s_A1, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 374; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType);

  /* "pytraj/core/ParameterTypes.pyx":378
 * 
 *     @property
 *     def A2(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A2()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType, __pyx_n_s_A2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":377
 *         return self.thisptr.A1()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def A2(self):
 *         return self.thisptr.A2()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 377; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType->tp_dict, __pyx_n_s_A2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType);

  /* "pytraj/core/ParameterTypes.pyx":382
 * 
 *     @property
 *     def A3(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A3()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType, __pyx_n_s_A3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":381
 *         return self.thisptr.A2()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def A3(self):
 *         return self.thisptr.A3()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 381; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType->tp_dict, __pyx_n_s_A3, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 382; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType);

  /* "pytraj/core/ParameterTypes.pyx":386
 * 
 *     @property
 *     def A4(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A4()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType, __pyx_n_s_A4); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":385
 *         return self.thisptr.A3()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def A4(self):
 *         return self.thisptr.A4()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 385; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType->tp_dict, __pyx_n_s_A4, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 386; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType);

  /* "pytraj/core/ParameterTypes.pyx":390
 * 
 *     @property
 *     def type(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Type()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType, __pyx_n_s_type); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":389
 *         return self.thisptr.A4()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def type(self):
 *         return self.thisptr.Type()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 389; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType->tp_dict, __pyx_n_s_type, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 390; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType);

  /* "pytraj/core/ParameterTypes.pyx":394
 * 
 *     @property
 *     def idx(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Idx()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType, __pyx_n_s_idx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":393
 *         return self.thisptr.Type()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def idx(self):
 *         return self.thisptr.Idx()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 393; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType->tp_dict, __pyx_n_s_idx, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 394; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralType);

  /* "pytraj/core/ParameterTypes.pyx":413
 * 
 *     @property
 *     def A1(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A1()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_BondType, __pyx_n_s_A1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":412
 *         del self.thisptr
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def A1(self):
 *         return self.thisptr.A1()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 412; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_BondType->tp_dict, __pyx_n_s_A1, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 413; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_BondType);

  /* "pytraj/core/ParameterTypes.pyx":417
 * 
 *     @property
 *     def A2(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.A2()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_BondType, __pyx_n_s_A2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":416
 *         return self.thisptr.A1()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def A2(self):
 *         return self.thisptr.A2()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 416; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_BondType->tp_dict, __pyx_n_s_A2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 417; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_BondType);

  /* "pytraj/core/ParameterTypes.pyx":421
 * 
 *     @property
 *     def Idx(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Idx()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_BondType, __pyx_n_s_Idx); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":420
 *         return self.thisptr.A2()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def Idx(self):
 *         return self.thisptr.Idx()
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 420; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_BondType->tp_dict, __pyx_n_s_Idx, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 421; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_BondType);

  /* "pytraj/core/ParameterTypes.pyx":424
 *         return self.thisptr.Idx()
 * 
 *     @Idx.setter             # <<<<<<<<<<<<<<
 *     def Idx(self,int i):
 *         self.thisptr.SetIdx(i)
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_BondType, __pyx_n_s_Idx); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_setter); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "pytraj/core/ParameterTypes.pyx":425
 * 
 *     @Idx.setter
 *     def Idx(self,int i):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetIdx(i)
 * 
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_BondType, __pyx_n_s_Idx); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __Pyx_GIVEREF(__pyx_t_4); __pyx_t_4 = NULL;
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 424; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_BondType->tp_dict, __pyx_n_s_Idx, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 425; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_BondType);

  /* "pytraj/core/ParameterTypes.pyx":449
 * 
 *     @property
 *     def NatCap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.NatCap()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CapParmType, __pyx_n_s_NatCap); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":448
 *         return self.thisptr.HasWaterCap()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def NatCap(self):
 *         return self.thisptr.NatCap()
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 448; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CapParmType->tp_dict, __pyx_n_s_NatCap, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 449; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_CapParmType);

  /* "pytraj/core/ParameterTypes.pyx":453
 * 
 *     @property
 *     def CutCap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.CutCap()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CapParmType, __pyx_n_s_CutCap); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":452
 *         return self.thisptr.NatCap()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def CutCap(self):
 *         return self.thisptr.CutCap()
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 452; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CapParmType->tp_dict, __pyx_n_s_CutCap, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 453; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_CapParmType);

  /* "pytraj/core/ParameterTypes.pyx":457
 * 
 *     @property
 *     def xCap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.xCap()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CapParmType, __pyx_n_s_xCap); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":456
 *         return self.thisptr.CutCap()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def xCap(self):
 *         return self.thisptr.xCap()
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 456; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CapParmType->tp_dict, __pyx_n_s_xCap, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 457; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_CapParmType);

  /* "pytraj/core/ParameterTypes.pyx":461
 * 
 *     @property
 *     def yCap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.yCap()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CapParmType, __pyx_n_s_yCap); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":460
 *         return self.thisptr.xCap()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def yCap(self):
 *         return self.thisptr.yCap()
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 460; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CapParmType->tp_dict, __pyx_n_s_yCap, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 461; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_CapParmType);

  /* "pytraj/core/ParameterTypes.pyx":465
 * 
 *     @property
 *     def zCap(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.zCap()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CapParmType, __pyx_n_s_zCap); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":464
 *         return self.thisptr.yCap()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def zCap(self):
 *         return self.thisptr.zCap()
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 464; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_CapParmType->tp_dict, __pyx_n_s_zCap, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 465; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_CapParmType);

  /* "pytraj/core/ParameterTypes.pyx":487
 * 
 *     @property
 *     def Pk(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Pk()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType, __pyx_n_s_Pk); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":486
 *         del self.thisptr
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def Pk(self):
 *         return self.thisptr.Pk()
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 486; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType->tp_dict, __pyx_n_s_Pk, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 487; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType);

  /* "pytraj/core/ParameterTypes.pyx":491
 * 
 *     @property
 *     def Pn(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Pn()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType, __pyx_n_s_Pn); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":490
 *         return self.thisptr.Pk()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def Pn(self):
 *         return self.thisptr.Pn()
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 490; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType->tp_dict, __pyx_n_s_Pn, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 491; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType);

  /* "pytraj/core/ParameterTypes.pyx":495
 * 
 *     @property
 *     def Phase(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.Phase()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType, __pyx_n_s_Phase); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":494
 *         return self.thisptr.Pn()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def Phase(self):
 *         return self.thisptr.Phase()
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 494; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType->tp_dict, __pyx_n_s_Phase, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 495; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType);

  /* "pytraj/core/ParameterTypes.pyx":499
 * 
 *     @property
 *     def SCEE(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.SCEE()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType, __pyx_n_s_SCEE); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":498
 *         return self.thisptr.Phase()
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def SCEE(self):
 *         return self.thisptr.SCEE()
 */
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 498; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType->tp_dict, __pyx_n_s_SCEE, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 499; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType);

  /* "pytraj/core/ParameterTypes.pyx":502
 *         return self.thisptr.SCEE()
 * 
 *     @SCEE.setter             # <<<<<<<<<<<<<<
 *     def SCEE(self,double s):
 *         self.thisptr.SetSCEE(s)
 */
  __pyx_t_3 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType, __pyx_n_s_SCEE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_setter); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "pytraj/core/ParameterTypes.pyx":503
 * 
 *     @SCEE.setter
 *     def SCEE(self,double s):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetSCEE(s)
 * 
 */
  __pyx_t_3 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType, __pyx_n_s_SCEE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_2)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_2);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_2) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_3); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2); __Pyx_GIVEREF(__pyx_t_2); __pyx_t_2 = NULL;
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 502; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType->tp_dict, __pyx_n_s_SCEE, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 503; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType);

  /* "pytraj/core/ParameterTypes.pyx":507
 * 
 *     @property
 *     def SCNB(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.SCNB()
 * 
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType, __pyx_n_s_SCNB); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);

  /* "pytraj/core/ParameterTypes.pyx":506
 *         self.thisptr.SetSCEE(s)
 * 
 *     @property             # <<<<<<<<<<<<<<
 *     def SCNB(self):
 *         return self.thisptr.SCNB()
 */
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_property, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 506; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType->tp_dict, __pyx_n_s_SCNB, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 507; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType);

  /* "pytraj/core/ParameterTypes.pyx":510
 *         return self.thisptr.SCNB()
 * 
 *     @SCNB.setter             # <<<<<<<<<<<<<<
 *     def SCNB(self,double s):
 *         self.thisptr.SetSCNB(s)
 */
  __pyx_t_5 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType, __pyx_n_s_SCNB); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_setter); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "pytraj/core/ParameterTypes.pyx":511
 * 
 *     @SCNB.setter
 *     def SCNB(self,double s):             # <<<<<<<<<<<<<<
 *         self.thisptr.SetSCNB(s)
 */
  __pyx_t_5 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType, __pyx_n_s_SCNB); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_2 = PyTuple_New(1+1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3); __Pyx_GIVEREF(__pyx_t_3); __pyx_t_3 = NULL;
    PyTuple_SET_ITEM(__pyx_t_2, 0+1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 510; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType->tp_dict, __pyx_n_s_SCNB, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 511; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6pytraj_4core_14ParameterTypes_DihedralParmType);

  /* "pytraj/core/ParameterTypes.pyx":1
 * # distutils: language = c++             # <<<<<<<<<<<<<<
 * 
 * # TODO:
 */
  __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init pytraj.core.ParameterTypes", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init pytraj.core.ParameterTypes");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject* args = PyTuple_Pack(1, arg);
    return (likely(args)) ? __Pyx_PyObject_Call(func, args, NULL) : NULL;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (((((int)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (((((((int)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (((((((((int)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return -(((((int)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (((((int)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return -(((((((int)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (((((((int)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return -(((((((((int)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (((((((((int)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (((((size_t)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (((((((size_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (((((((((size_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return -(((((size_t)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (((((size_t)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return -(((((((size_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (((((((size_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return -(((((((((size_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (((((((((size_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (((((long)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (((((((long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (((((((((long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return -(((((long)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (((((long)digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return -(((((((long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (((((((long)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return -(((((((((long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (((((((((long)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}













































































































































































static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}

static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}

static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;

        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {

                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {

            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {

            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif

#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}


static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}

static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}

static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);

    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | digits[2]) << PyLong_SHIFT) | digits[1]) << PyLong_SHIFT) | digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}

static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
